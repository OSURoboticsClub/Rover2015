
BasicBrainBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00802000  00000760  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00802018  00802018  0000080c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b54  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a14  00000000  00000000  00003b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  00004528  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000114f  00000000  00000000  000047ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007aa  00000000  00000000  0000593b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  000060e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
   2:	00 00       	nop
   4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
   6:	00 00       	nop
   8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
   a:	00 00       	nop
   c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
   e:	00 00       	nop
  10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
  12:	00 00       	nop
  14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
  16:	00 00       	nop
  18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
  1e:	00 00       	nop
  20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
  22:	00 00       	nop
  24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
  26:	00 00       	nop
  28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
  2e:	00 00       	nop
  30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
  32:	00 00       	nop
  34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c1       	rjmp	.+576    	; 0x27a <__vector_14>
  3a:	00 00       	nop
  3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
  3e:	00 00       	nop
  40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
  42:	00 00       	nop
  44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
  46:	00 00       	nop
  48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
  4e:	00 00       	nop
  50:	fc c0       	rjmp	.+504    	; 0x24a <__vector_20>
  52:	00 00       	nop
  54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
  56:	00 00       	nop
  58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
  62:	00 00       	nop
  64:	22 c1       	rjmp	.+580    	; 0x2aa <__vector_25>
  66:	00 00       	nop
  68:	49 c1       	rjmp	.+658    	; 0x2fc <__vector_26>
  6a:	00 00       	nop
  6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
  6e:	00 00       	nop
  70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
  72:	00 00       	nop
  74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
  76:	00 00       	nop
  78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
  82:	00 00       	nop
  84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
  86:	00 00       	nop
  88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
  8e:	00 00       	nop
  90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
  92:	00 00       	nop
  94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
  96:	00 00       	nop
  98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
 102:	00 00       	nop
 104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
 106:	00 00       	nop
 108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
 10e:	00 00       	nop
 110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
 112:	00 00       	nop
 114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
 116:	00 00       	nop
 118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
 11e:	00 00       	nop
 120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
 122:	00 00       	nop
 124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
 126:	00 00       	nop
 128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
 12e:	00 00       	nop
 130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
 132:	00 00       	nop
 134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
 136:	00 00       	nop
 138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
 13e:	00 00       	nop
 140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
 142:	00 00       	nop
 144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
 146:	00 00       	nop
 148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
 14e:	00 00       	nop
 150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
 152:	00 00       	nop
 154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
 156:	00 00       	nop
 158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
 15e:	00 00       	nop
 160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
 162:	00 00       	nop
 164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
 166:	00 00       	nop
 168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
 16e:	00 00       	nop
 170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
 172:	00 00       	nop
 174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
 176:	00 00       	nop
 178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
 17e:	00 00       	nop
 180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
 182:	00 00       	nop
 184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
 186:	00 00       	nop
 188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
 18e:	00 00       	nop
 190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
 192:	00 00       	nop
 194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
 196:	00 00       	nop
 198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
 1fa:	00 00       	nop
 1fc:	d3 02       	muls	r29, r19
 1fe:	ed 02       	muls	r30, r29
 200:	e0 02       	muls	r30, r16
 202:	fa 02       	muls	r31, r26
 204:	07 03       	mulsu	r16, r23
 206:	14 03       	mulsu	r17, r20
 208:	21 03       	mulsu	r18, r17

0000020a <__ctors_end>:
 20a:	11 24       	eor	r1, r1
 20c:	1f be       	out	0x3f, r1	; 63
 20e:	cf ef       	ldi	r28, 0xFF	; 255
 210:	cd bf       	out	0x3d, r28	; 61
 212:	df e3       	ldi	r29, 0x3F	; 63
 214:	de bf       	out	0x3e, r29	; 62
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
 21a:	10 e2       	ldi	r17, 0x20	; 32
 21c:	a0 e0       	ldi	r26, 0x00	; 0
 21e:	b0 e2       	ldi	r27, 0x20	; 32
 220:	e0 e6       	ldi	r30, 0x60	; 96
 222:	f7 e0       	ldi	r31, 0x07	; 7
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	0b bf       	out	0x3b, r16	; 59
 228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
 22a:	07 90       	elpm	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	a8 31       	cpi	r26, 0x18	; 24
 230:	b1 07       	cpc	r27, r17
 232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
 234:	20 e2       	ldi	r18, 0x20	; 32
 236:	a8 e1       	ldi	r26, 0x18	; 24
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
 23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
 23e:	a9 32       	cpi	r26, 0x29	; 41
 240:	b2 07       	cpc	r27, r18
 242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
 244:	12 d1       	rcall	.+548    	; 0x46a <main>
 246:	8a c2       	rjmp	.+1300   	; 0x75c <_exit>

00000248 <__bad_interrupt>:
 248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <__vector_20>:

/*
Description: General-Purpose debug function. No designated function, available 
for all who program the board.
*/
void debugMain(){
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	8f 93       	push	r24
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	e0 e4       	ldi	r30, 0x40	; 64
 262:	f8 e0       	ldi	r31, 0x08	; 8
 264:	84 87       	std	Z+12, r24	; 0x0c
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	8f 91       	pop	r24
 26c:	0f 90       	pop	r0
 26e:	0b be       	out	0x3b, r0	; 59
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_14>:
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	0b b6       	in	r0, 0x3b	; 59
 286:	0f 92       	push	r0
 288:	8f 93       	push	r24
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	e0 e0       	ldi	r30, 0x00	; 0
 292:	f8 e0       	ldi	r31, 0x08	; 8
 294:	84 87       	std	Z+12, r24	; 0x0c
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0b be       	out	0x3b, r0	; 59
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_25>:
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	0b b6       	in	r0, 0x3b	; 59
 2b6:	0f 92       	push	r0
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
 2d0:	8a e1       	ldi	r24, 0x1A	; 26
 2d2:	90 e2       	ldi	r25, 0x20	; 32
 2d4:	30 d1       	rcall	.+608    	; 0x536 <USART_RXComplete>
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0b be       	out	0x3b, r0	; 59
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <__vector_26>:
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	0b b6       	in	r0, 0x3b	; 59
 308:	0f 92       	push	r0
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
 322:	8a e1       	ldi	r24, 0x1A	; 26
 324:	90 e2       	ldi	r25, 0x20	; 32
 326:	1c d1       	rcall	.+568    	; 0x560 <USART_DataRegEmpty>
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	bf 91       	pop	r27
 32e:	af 91       	pop	r26
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	7f 91       	pop	r23
 336:	6f 91       	pop	r22
 338:	5f 91       	pop	r21
 33a:	4f 91       	pop	r20
 33c:	3f 91       	pop	r19
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0b be       	out	0x3b, r0	; 59
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <_Z9driveMainv>:
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	21 d1       	rcall	.+578    	; 0x594 <_Z11RGBSetColor9RGBColors>
 352:	2f ef       	ldi	r18, 0xFF	; 255
 354:	83 ed       	ldi	r24, 0xD3	; 211
 356:	90 e3       	ldi	r25, 0x30	; 48
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <_Z9driveMainv+0xa>
 360:	00 c0       	rjmp	.+0      	; 0x362 <_Z9driveMainv+0x14>
 362:	00 00       	nop
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	16 d1       	rcall	.+556    	; 0x594 <_Z11RGBSetColor9RGBColors>
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	83 ed       	ldi	r24, 0xD3	; 211
 36c:	90 e3       	ldi	r25, 0x30	; 48
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <_Z9driveMainv+0x20>
 376:	00 c0       	rjmp	.+0      	; 0x378 <_Z9driveMainv+0x2a>
 378:	00 00       	nop
 37a:	08 95       	ret

0000037c <_Z9uart_initv>:
	
}

void uart_init(void){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
 37c:	e0 e4       	ldi	r30, 0x40	; 64
 37e:	f6 e0       	ldi	r31, 0x06	; 6
 380:	88 e0       	ldi	r24, 0x08	; 8
 382:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	60 ea       	ldi	r22, 0xA0	; 160
 38c:	78 e0       	ldi	r23, 0x08	; 8
 38e:	8a e1       	ldi	r24, 0x1A	; 26
 390:	90 e2       	ldi	r25, 0x20	; 32
 392:	b4 d0       	rcall	.+360    	; 0x4fc <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
 394:	e0 91 1a 20 	lds	r30, 0x201A
 398:	f0 91 1b 20 	lds	r31, 0x201B
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
 3a0:	83 81       	ldd	r24, Z+3	; 0x03
 3a2:	8f 7c       	andi	r24, 0xCF	; 207
 3a4:	80 61       	ori	r24, 0x10	; 16
 3a6:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
 3a8:	a0 ea       	ldi	r26, 0xA0	; 160
 3aa:	b8 e0       	ldi	r27, 0x08	; 8
 3ac:	8f ec       	ldi	r24, 0xCF	; 207
 3ae:	16 96       	adiw	r26, 0x06	; 6
 3b0:	8c 93       	st	X, r24
 3b2:	16 97       	sbiw	r26, 0x06	; 6
 3b4:	17 96       	adiw	r26, 0x07	; 7
 3b6:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
 3b8:	84 81       	ldd	r24, Z+4	; 0x04
 3ba:	80 61       	ori	r24, 0x10	; 16
 3bc:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
 3be:	84 81       	ldd	r24, Z+4	; 0x04
 3c0:	88 60       	ori	r24, 0x08	; 8
 3c2:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
 3c4:	e0 ea       	ldi	r30, 0xA0	; 160
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	82 81       	ldd	r24, Z+2	; 0x02
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	82 83       	std	Z+2, r24	; 0x02
 3ce:	08 95       	ret

000003d0 <_Z10timer_initv>:
}

//Initializes timers
void timer_init(void){
	TCC0.PER = 100;	//period for PWM
 3d0:	e0 e0       	ldi	r30, 0x00	; 0
 3d2:	f8 e0       	ldi	r31, 0x08	; 8
 3d4:	24 e6       	ldi	r18, 0x64	; 100
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	26 a3       	std	Z+38, r18	; 0x26
 3da:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc; //sets the PWM base frequency by 2000000/256
 3dc:	66 e0       	ldi	r22, 0x06	; 6
 3de:	60 83       	st	Z, r22
	TCC0.CTRLB = TC_WGMODE_SINGLESLOPE_gc; //sets the wave generation mode to single slope
 3e0:	53 e0       	ldi	r21, 0x03	; 3
 3e2:	51 83       	std	Z+1, r21	; 0x01
	TCC0.CTRLB |= (0b00110000); //output pins on red and blue LED
 3e4:	81 81       	ldd	r24, Z+1	; 0x01
 3e6:	80 63       	ori	r24, 0x30	; 48
 3e8:	81 83       	std	Z+1, r24	; 0x01
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; //interrupt register
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	46 83       	std	Z+6, r20	; 0x06
	TCC0.CCB = 10; 
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	82 a7       	std	Z+42, r24	; 0x2a
 3f4:	93 a7       	std	Z+43, r25	; 0x2b
	TCC0.CCA = 50; 
 3f6:	82 e3       	ldi	r24, 0x32	; 50
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	80 a7       	std	Z+40, r24	; 0x28
 3fc:	91 a7       	std	Z+41, r25	; 0x29
	
	TCC1.PER = 100;
 3fe:	e0 e4       	ldi	r30, 0x40	; 64
 400:	f8 e0       	ldi	r31, 0x08	; 8
 402:	26 a3       	std	Z+38, r18	; 0x26
 404:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA = TC_CLKSEL_DIV256_gc;
 406:	60 83       	st	Z, r22
	TCC1.CTRLB = TC_WGMODE_SINGLESLOPE_gc;
 408:	51 83       	std	Z+1, r21	; 0x01
	TCC1.CTRLB |= (0b00010000); //output pins on green LED
 40a:	21 81       	ldd	r18, Z+1	; 0x01
 40c:	20 61       	ori	r18, 0x10	; 16
 40e:	21 83       	std	Z+1, r18	; 0x01
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
 410:	46 83       	std	Z+6, r20	; 0x06
	TCC1.CCA = 50;
 412:	80 a7       	std	Z+40, r24	; 0x28
 414:	91 a7       	std	Z+41, r25	; 0x29
 416:	08 95       	ret

00000418 <_Z12SendStringPCPc>:
}

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 418:	fc 01       	movw	r30, r24
 41a:	20 81       	ld	r18, Z
 41c:	22 23       	and	r18, r18
 41e:	59 f0       	breq	.+22     	; 0x436 <_Z12SendStringPCPc+0x1e>
 420:	dc 01       	movw	r26, r24
 422:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
 424:	e0 ea       	ldi	r30, 0xA0	; 160
 426:	f8 e0       	ldi	r31, 0x08	; 8
 428:	81 81       	ldd	r24, Z+1	; 0x01
 42a:	85 ff       	sbrs	r24, 5
 42c:	fd cf       	rjmp	.-6      	; 0x428 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);
 42e:	20 83       	st	Z, r18
	TCC1.CCA = 50;
}

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 430:	2d 91       	ld	r18, X+
 432:	21 11       	cpse	r18, r1
 434:	f9 cf       	rjmp	.-14     	; 0x428 <_Z12SendStringPCPc+0x10>
 436:	08 95       	ret

00000438 <_Z23SetXMEGA32MhzCalibratedv>:
	}
}

//Configures the XMEGA to run on it's 32Mhz internal? oscillator
void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 438:	88 ed       	ldi	r24, 0xD8	; 216
 43a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
 442:	e0 e5       	ldi	r30, 0x50	; 80
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	81 81       	ldd	r24, Z+1	; 0x01
 448:	81 ff       	sbrs	r24, 1
 44a:	fd cf       	rjmp	.-6      	; 0x446 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
 44c:	88 ed       	ldi	r24, 0xD8	; 216
 44e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 456:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
 458:	e0 e5       	ldi	r30, 0x50	; 80
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	84 60       	ori	r24, 0x04	; 4
 460:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
 462:	81 81       	ldd	r24, Z+1	; 0x01
 464:	82 ff       	sbrs	r24, 2
 466:	fd cf       	rjmp	.-6      	; 0x462 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	/*
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator 
	*/
}
 468:	08 95       	ret

0000046a <main>:




int main(void)
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	2c 97       	sbiw	r28, 0x0c	; 12
 474:	cd bf       	out	0x3d, r28	; 61
 476:	de bf       	out	0x3e, r29	; 62
	SetXMEGA32MhzCalibrated();
 478:	df df       	rcall	.-66     	; 0x438 <_Z23SetXMEGA32MhzCalibratedv>
	//Main's Variable Declarations
	char XmegaIDStr[11];
	XMEGAID CurrentID;
		
	//Initialization Code
	uart_init();
 47a:	80 df       	rcall	.-256    	; 0x37c <_Z9uart_initv>
	initializeIO();
 47c:	00 d1       	rcall	.+512    	; 0x67e <_Z12initializeIOv>
	determineID(XmegaIDStr, CurrentID);
 47e:	be 01       	movw	r22, r28
 480:	64 5f       	subi	r22, 0xF4	; 244
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	06 d1       	rcall	.+524    	; 0x696 <_Z11determineIDPcR7XMEGAID>
	timer_init();  //Initialize Timers
 48a:	a2 df       	rcall	.-188    	; 0x3d0 <_Z10timer_initv>
	sei(); //Enable interrupts
 48c:	78 94       	sei
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm; //draws current for ?
 48e:	e0 ea       	ldi	r30, 0xA0	; 160
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	82 81       	ldd	r24, Z+2	; 0x02
 494:	81 60       	ori	r24, 0x01	; 1
 496:	82 83       	std	Z+2, r24	; 0x02
				RGBSetColor(YELLOW);
				char recieveChar;
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
					if (recieveChar == 'r'){
						CurrentState = MainProgram;
 498:	02 e0       	ldi	r16, 0x02	; 2
				RGBSetColor(RED);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
					if (recieveChar == 'p'){
						SendStringPC(XmegaIDStr); //Identify itself
						CurrentState = WaitForReady;
 49a:	11 e0       	ldi	r17, 0x01	; 1

	
    while(1)
    { 
		
		switch (CurrentState){
 49c:	80 91 18 20 	lds	r24, 0x2018
 4a0:	81 30       	cpi	r24, 0x01	; 1
 4a2:	c1 f0       	breq	.+48     	; 0x4d4 <main+0x6a>
 4a4:	18 f0       	brcs	.+6      	; 0x4ac <main+0x42>
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	21 f1       	breq	.+72     	; 0x4f2 <main+0x88>
 4aa:	fa cf       	rjmp	.-12     	; 0x4a0 <main+0x36>
			case WaitForPing:
				RGBSetColor(RED);
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	72 d0       	rcall	.+228    	; 0x594 <_Z11RGBSetColor9RGBColors>
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 4b0:	8a e1       	ldi	r24, 0x1A	; 26
 4b2:	90 e2       	ldi	r25, 0x20	; 32
 4b4:	2c d0       	rcall	.+88     	; 0x50e <USART_RXBufferData_Available>
 4b6:	88 23       	and	r24, r24
 4b8:	89 f3       	breq	.-30     	; 0x49c <main+0x32>
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
 4ba:	8a e1       	ldi	r24, 0x1A	; 26
 4bc:	90 e2       	ldi	r25, 0x20	; 32
 4be:	2f d0       	rcall	.+94     	; 0x51e <USART_RXBuffer_GetByte>
 4c0:	80 93 19 20 	sts	0x2019, r24
					if (recieveChar == 'p'){
 4c4:	80 37       	cpi	r24, 0x70	; 112
 4c6:	51 f7       	brne	.-44     	; 0x49c <main+0x32>
						SendStringPC(XmegaIDStr); //Identify itself
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	a5 df       	rcall	.-182    	; 0x418 <_Z12SendStringPCPc>
						CurrentState = WaitForReady;
 4ce:	10 93 18 20 	sts	0x2018, r17
 4d2:	e4 cf       	rjmp	.-56     	; 0x49c <main+0x32>
					}
					//else, do nothing and wait for more chars
				}
				break;
			case WaitForReady:
				RGBSetColor(YELLOW);
 4d4:	84 e0       	ldi	r24, 0x04	; 4
 4d6:	5e d0       	rcall	.+188    	; 0x594 <_Z11RGBSetColor9RGBColors>
				char recieveChar;
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 4d8:	8a e1       	ldi	r24, 0x1A	; 26
 4da:	90 e2       	ldi	r25, 0x20	; 32
 4dc:	18 d0       	rcall	.+48     	; 0x50e <USART_RXBufferData_Available>
 4de:	88 23       	and	r24, r24
 4e0:	e9 f2       	breq	.-70     	; 0x49c <main+0x32>
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
 4e2:	8a e1       	ldi	r24, 0x1A	; 26
 4e4:	90 e2       	ldi	r25, 0x20	; 32
 4e6:	1b d0       	rcall	.+54     	; 0x51e <USART_RXBuffer_GetByte>
					if (recieveChar == 'r'){
 4e8:	82 37       	cpi	r24, 0x72	; 114
 4ea:	c1 f6       	brne	.-80     	; 0x49c <main+0x32>
						CurrentState = MainProgram;
 4ec:	00 93 18 20 	sts	0x2018, r16
 4f0:	d5 cf       	rjmp	.-86     	; 0x49c <main+0x32>
				}
				break;
			case MainProgram:
				//RGBSetColor(GREEN);
				while (1){
					switch (CurrentID) {
 4f2:	8c 85       	ldd	r24, Y+12	; 0x0c
 4f4:	81 11       	cpse	r24, r1
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <main+0x8a>
						case DRIVE:
							driveMain();
 4f8:	2a df       	rcall	.-428    	; 0x34e <_Z9driveMainv>
							break;
 4fa:	fb cf       	rjmp	.-10     	; 0x4f2 <main+0x88>

000004fc <USART_InterruptDriver_Initialize>:
		tempCTRLA = usart_data->usart->CTRLA;
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
		usart_data->usart->CTRLA = tempCTRLA;
	}
	return TXBuffer_FreeSpace;
}
 4fc:	fc 01       	movw	r30, r24
 4fe:	60 83       	st	Z, r22
 500:	71 83       	std	Z+1, r23	; 0x01
 502:	42 83       	std	Z+2, r20	; 0x02
 504:	14 86       	std	Z+12, r1	; 0x0c
 506:	13 86       	std	Z+11, r1	; 0x0b
 508:	16 86       	std	Z+14, r1	; 0x0e
 50a:	15 86       	std	Z+13, r1	; 0x0d
 50c:	08 95       	ret

0000050e <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 50e:	fc 01       	movw	r30, r24
 510:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 512:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	29 13       	cpse	r18, r25
 518:	01 c0       	rjmp	.+2      	; 0x51c <USART_RXBufferData_Available+0xe>
 51a:	80 e0       	ldi	r24, 0x00	; 0
}
 51c:	08 95       	ret

0000051e <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 51e:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 520:	84 85       	ldd	r24, Z+12	; 0x0c
 522:	df 01       	movw	r26, r30
 524:	a8 0f       	add	r26, r24
 526:	b1 1d       	adc	r27, r1
 528:	13 96       	adiw	r26, 0x03	; 3
 52a:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 52c:	94 85       	ldd	r25, Z+12	; 0x0c
 52e:	9f 5f       	subi	r25, 0xFF	; 255
 530:	93 70       	andi	r25, 0x03	; 3
 532:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 534:	08 95       	ret

00000536 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 536:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 538:	83 85       	ldd	r24, Z+11	; 0x0b
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 53e:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 540:	a0 81       	ld	r26, Z
 542:	b1 81       	ldd	r27, Z+1	; 0x01
 544:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 546:	89 17       	cp	r24, r25
 548:	49 f0       	breq	.+18     	; 0x55c <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 54a:	93 85       	ldd	r25, Z+11	; 0x0b
 54c:	df 01       	movw	r26, r30
 54e:	a9 0f       	add	r26, r25
 550:	b1 1d       	adc	r27, r1
 552:	13 96       	adiw	r26, 0x03	; 3
 554:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 556:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 55c:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 55e:	08 95       	ret

00000560 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 560:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 562:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 564:	95 85       	ldd	r25, Z+13	; 0x0d
 566:	98 13       	cpse	r25, r24
 568:	07 c0       	rjmp	.+14     	; 0x578 <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 56a:	01 90       	ld	r0, Z+
 56c:	f0 81       	ld	r31, Z
 56e:	e0 2d       	mov	r30, r0
 570:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 572:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 574:	83 83       	std	Z+3, r24	; 0x03
 576:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 578:	86 85       	ldd	r24, Z+14	; 0x0e
 57a:	df 01       	movw	r26, r30
 57c:	a8 0f       	add	r26, r24
 57e:	b1 1d       	adc	r27, r1
 580:	17 96       	adiw	r26, 0x07	; 7
 582:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 584:	a0 81       	ld	r26, Z
 586:	b1 81       	ldd	r27, Z+1	; 0x01
 588:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 58a:	86 85       	ldd	r24, Z+14	; 0x0e
 58c:	8f 5f       	subi	r24, 0xFF	; 255
 58e:	83 70       	andi	r24, 0x03	; 3
 590:	86 87       	std	Z+14, r24	; 0x0e
 592:	08 95       	ret

00000594 <_Z11RGBSetColor9RGBColors>:
#include <avr/io.h>

//This function handles making colors on the RGB LED
//Author: Nick M
void RGBSetColor(RGBColors choice){
	switch(choice){
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	87 30       	cpi	r24, 0x07	; 7
 598:	91 05       	cpc	r25, r1
 59a:	08 f0       	brcs	.+2      	; 0x59e <_Z11RGBSetColor9RGBColors+0xa>
 59c:	63 c0       	rjmp	.+198    	; 0x664 <_Z11RGBSetColor9RGBColors+0xd0>
 59e:	fc 01       	movw	r30, r24
 5a0:	e2 50       	subi	r30, 0x02	; 2
 5a2:	ff 4f       	sbci	r31, 0xFF	; 255
 5a4:	d5 c0       	rjmp	.+426    	; 0x750 <__tablejump2__>
		case RED:
			TCC0.CCA = 0;
 5a6:	e0 e0       	ldi	r30, 0x00	; 0
 5a8:	f8 e0       	ldi	r31, 0x08	; 8
 5aa:	10 a6       	std	Z+40, r1	; 0x28
 5ac:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = COLOR_ON;
 5ae:	82 e3       	ldi	r24, 0x32	; 50
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	82 a7       	std	Z+42, r24	; 0x2a
 5b4:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = 0;
 5b6:	e0 e4       	ldi	r30, 0x40	; 64
 5b8:	f8 e0       	ldi	r31, 0x08	; 8
 5ba:	10 a6       	std	Z+40, r1	; 0x28
 5bc:	11 a6       	std	Z+41, r1	; 0x29
			break;
 5be:	08 95       	ret
		case BLUE:
			TCC0.CCA = COLOR_ON;
 5c0:	e0 e0       	ldi	r30, 0x00	; 0
 5c2:	f8 e0       	ldi	r31, 0x08	; 8
 5c4:	82 e3       	ldi	r24, 0x32	; 50
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	80 a7       	std	Z+40, r24	; 0x28
 5ca:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = 0;
 5cc:	12 a6       	std	Z+42, r1	; 0x2a
 5ce:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = 0;
 5d0:	e0 e4       	ldi	r30, 0x40	; 64
 5d2:	f8 e0       	ldi	r31, 0x08	; 8
 5d4:	10 a6       	std	Z+40, r1	; 0x28
 5d6:	11 a6       	std	Z+41, r1	; 0x29
			break;
 5d8:	08 95       	ret
		case GREEN:
			TCC0.CCA = 0;
 5da:	e0 e0       	ldi	r30, 0x00	; 0
 5dc:	f8 e0       	ldi	r31, 0x08	; 8
 5de:	10 a6       	std	Z+40, r1	; 0x28
 5e0:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = 0;
 5e2:	12 a6       	std	Z+42, r1	; 0x2a
 5e4:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = COLOR_ON;
 5e6:	82 e3       	ldi	r24, 0x32	; 50
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	e0 e4       	ldi	r30, 0x40	; 64
 5ec:	f8 e0       	ldi	r31, 0x08	; 8
 5ee:	80 a7       	std	Z+40, r24	; 0x28
 5f0:	91 a7       	std	Z+41, r25	; 0x29
			break;
 5f2:	08 95       	ret
		case PURPLE:
			TCC0.CCA = COLOR_ON;
 5f4:	e0 e0       	ldi	r30, 0x00	; 0
 5f6:	f8 e0       	ldi	r31, 0x08	; 8
 5f8:	82 e3       	ldi	r24, 0x32	; 50
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	80 a7       	std	Z+40, r24	; 0x28
 5fe:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = COLOR_ON;
 600:	82 a7       	std	Z+42, r24	; 0x2a
 602:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = 0;
 604:	e0 e4       	ldi	r30, 0x40	; 64
 606:	f8 e0       	ldi	r31, 0x08	; 8
 608:	10 a6       	std	Z+40, r1	; 0x28
 60a:	11 a6       	std	Z+41, r1	; 0x29
			break;
 60c:	08 95       	ret
		case YELLOW:
			TCC0.CCA = 0;
 60e:	e0 e0       	ldi	r30, 0x00	; 0
 610:	f8 e0       	ldi	r31, 0x08	; 8
 612:	10 a6       	std	Z+40, r1	; 0x28
 614:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = COLOR_ON;
 616:	82 e3       	ldi	r24, 0x32	; 50
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	82 a7       	std	Z+42, r24	; 0x2a
 61c:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON;
 61e:	e0 e4       	ldi	r30, 0x40	; 64
 620:	f8 e0       	ldi	r31, 0x08	; 8
 622:	80 a7       	std	Z+40, r24	; 0x28
 624:	91 a7       	std	Z+41, r25	; 0x29
			break;
 626:	08 95       	ret
		case WHITE:
			TCC0.CCA = COLOR_ON;
 628:	e0 e0       	ldi	r30, 0x00	; 0
 62a:	f8 e0       	ldi	r31, 0x08	; 8
 62c:	82 e3       	ldi	r24, 0x32	; 50
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	80 a7       	std	Z+40, r24	; 0x28
 632:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = COLOR_ON;
 634:	82 a7       	std	Z+42, r24	; 0x2a
 636:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON;
 638:	e0 e4       	ldi	r30, 0x40	; 64
 63a:	f8 e0       	ldi	r31, 0x08	; 8
 63c:	80 a7       	std	Z+40, r24	; 0x28
 63e:	91 a7       	std	Z+41, r25	; 0x29
			break;
 640:	08 95       	ret
		case ORANGE:
			TCC0.CCB = COLOR_ON;      //Red
 642:	e0 e0       	ldi	r30, 0x00	; 0
 644:	f8 e0       	ldi	r31, 0x08	; 8
 646:	82 e3       	ldi	r24, 0x32	; 50
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	82 a7       	std	Z+42, r24	; 0x2a
 64c:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON / 2;  //Green
 64e:	89 e1       	ldi	r24, 0x19	; 25
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	a0 e4       	ldi	r26, 0x40	; 64
 654:	b8 e0       	ldi	r27, 0x08	; 8
 656:	98 96       	adiw	r26, 0x28	; 40
 658:	8d 93       	st	X+, r24
 65a:	9c 93       	st	X, r25
 65c:	99 97       	sbiw	r26, 0x29	; 41
			TCC0.CCA = 0;             //Blue
 65e:	10 a6       	std	Z+40, r1	; 0x28
 660:	11 a6       	std	Z+41, r1	; 0x29
			break;
 662:	08 95       	ret
		case OFF:
		default:
			TCC0.CCB = 0;  //Red
 664:	e0 e0       	ldi	r30, 0x00	; 0
 666:	f8 e0       	ldi	r31, 0x08	; 8
 668:	12 a6       	std	Z+42, r1	; 0x2a
 66a:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = 0;  //Green
 66c:	a0 e4       	ldi	r26, 0x40	; 64
 66e:	b8 e0       	ldi	r27, 0x08	; 8
 670:	98 96       	adiw	r26, 0x28	; 40
 672:	1d 92       	st	X+, r1
 674:	1c 92       	st	X, r1
 676:	99 97       	sbiw	r26, 0x29	; 41
			TCC0.CCA = 0;  //Blue
 678:	10 a6       	std	Z+40, r1	; 0x28
 67a:	11 a6       	std	Z+41, r1	; 0x29
 67c:	08 95       	ret

0000067e <_Z12initializeIOv>:


//Initializes all I/O for the board
//Sets up DIR, and PULLUP/PULLDOWN Resistors, etc.
void initializeIO(){
	PORTC.DIRSET = (PIN5_bm); //Sets output LED (status/error)
 67e:	e0 e4       	ldi	r30, 0x40	; 64
 680:	f6 e0       	ldi	r31, 0x06	; 6
 682:	80 e2       	ldi	r24, 0x20	; 32
 684:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = (PIN0_bm | PIN1_bm | PIN4_bm); //Set RGB Led outputs
 686:	83 e1       	ldi	r24, 0x13	; 19
 688:	81 83       	std	Z+1, r24	; 0x01
	
	PORTC.DIRCLR = (PIN6_bm | PIN7_bm); //Sets DIP Switch Input
 68a:	80 ec       	ldi	r24, 0xC0	; 192
 68c:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
 68e:	88 e1       	ldi	r24, 0x18	; 24
 690:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
 692:	87 8b       	std	Z+23, r24	; 0x17
 694:	08 95       	ret

00000696 <_Z11determineIDPcR7XMEGAID>:

//This function handles determining the ID of the board, and putting
//the identification string in its variable
//Author: Nick M
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 696:	e0 e4       	ldi	r30, 0x40	; 64
 698:	f6 e0       	ldi	r31, 0x06	; 6
 69a:	20 85       	ldd	r18, Z+8	; 0x08
 69c:	22 23       	and	r18, r18
 69e:	b4 f4       	brge	.+44     	; 0x6cc <_Z11determineIDPcR7XMEGAID+0x36>
 6a0:	20 85       	ldd	r18, Z+8	; 0x08
 6a2:	26 fd       	sbrc	r18, 6
 6a4:	19 c0       	rjmp	.+50     	; 0x6d8 <_Z11determineIDPcR7XMEGAID+0x42>
 6a6:	12 c0       	rjmp	.+36     	; 0x6cc <_Z11determineIDPcR7XMEGAID+0x36>
		CurrentID = DRIVE;
		strcpy(XmegaIDStr, "DRIVE");
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
 6a8:	e0 e4       	ldi	r30, 0x40	; 64
 6aa:	f6 e0       	ldi	r31, 0x06	; 6
 6ac:	20 85       	ldd	r18, Z+8	; 0x08
 6ae:	26 ff       	sbrs	r18, 6
 6b0:	1e c0       	rjmp	.+60     	; 0x6ee <_Z11determineIDPcR7XMEGAID+0x58>
 6b2:	2a c0       	rjmp	.+84     	; 0x708 <_Z11determineIDPcR7XMEGAID+0x72>
		CurrentID = ARM;
		strcpy(XmegaIDStr, "ARM");
	}
	else if (CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 6b4:	e0 e4       	ldi	r30, 0x40	; 64
 6b6:	f6 e0       	ldi	r31, 0x06	; 6
 6b8:	20 85       	ldd	r18, Z+8	; 0x08
 6ba:	26 fd       	sbrc	r18, 6
 6bc:	2b c0       	rjmp	.+86     	; 0x714 <_Z11determineIDPcR7XMEGAID+0x7e>
 6be:	36 c0       	rjmp	.+108    	; 0x72c <_Z11determineIDPcR7XMEGAID+0x96>
		CurrentID = RADIO;
		strcpy(XmegaIDStr, "RADIO");
	}
	else if (CHECK_DIP_SW_1() && CHECK_DIP_SW_2()){
 6c0:	e0 e4       	ldi	r30, 0x40	; 64
 6c2:	f6 e0       	ldi	r31, 0x06	; 6
 6c4:	20 85       	ldd	r18, Z+8	; 0x08
 6c6:	26 ff       	sbrs	r18, 6
 6c8:	37 c0       	rjmp	.+110    	; 0x738 <_Z11determineIDPcR7XMEGAID+0xa2>
 6ca:	08 95       	ret
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
		CurrentID = DRIVE;
		strcpy(XmegaIDStr, "DRIVE");
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
 6cc:	e0 e4       	ldi	r30, 0x40	; 64
 6ce:	f6 e0       	ldi	r31, 0x06	; 6
 6d0:	20 85       	ldd	r18, Z+8	; 0x08
 6d2:	22 23       	and	r18, r18
 6d4:	cc f4       	brge	.+50     	; 0x708 <_Z11determineIDPcR7XMEGAID+0x72>
 6d6:	e8 cf       	rjmp	.-48     	; 0x6a8 <_Z11determineIDPcR7XMEGAID+0x12>
//This function handles determining the ID of the board, and putting
//the identification string in its variable
//Author: Nick M
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
		CurrentID = DRIVE;
 6d8:	fb 01       	movw	r30, r22
 6da:	10 82       	st	Z, r1
		strcpy(XmegaIDStr, "DRIVE");
 6dc:	26 e0       	ldi	r18, 0x06	; 6
 6de:	e0 e0       	ldi	r30, 0x00	; 0
 6e0:	f0 e2       	ldi	r31, 0x20	; 32
 6e2:	dc 01       	movw	r26, r24
 6e4:	01 90       	ld	r0, Z+
 6e6:	0d 92       	st	X+, r0
 6e8:	2a 95       	dec	r18
 6ea:	e1 f7       	brne	.-8      	; 0x6e4 <_Z11determineIDPcR7XMEGAID+0x4e>
 6ec:	08 95       	ret
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
		CurrentID = ARM;
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	fb 01       	movw	r30, r22
 6f2:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "ARM");
 6f4:	41 e4       	ldi	r20, 0x41	; 65
 6f6:	52 e5       	ldi	r21, 0x52	; 82
 6f8:	6d e4       	ldi	r22, 0x4D	; 77
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	fc 01       	movw	r30, r24
 6fe:	40 83       	st	Z, r20
 700:	51 83       	std	Z+1, r21	; 0x01
 702:	62 83       	std	Z+2, r22	; 0x02
 704:	73 83       	std	Z+3, r23	; 0x03
 706:	08 95       	ret
	}
	else if (CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 708:	e0 e4       	ldi	r30, 0x40	; 64
 70a:	f6 e0       	ldi	r31, 0x06	; 6
 70c:	20 85       	ldd	r18, Z+8	; 0x08
 70e:	22 23       	and	r18, r18
 710:	8c f6       	brge	.-94     	; 0x6b4 <_Z11determineIDPcR7XMEGAID+0x1e>
 712:	0c c0       	rjmp	.+24     	; 0x72c <_Z11determineIDPcR7XMEGAID+0x96>
		CurrentID = RADIO;
 714:	22 e0       	ldi	r18, 0x02	; 2
 716:	fb 01       	movw	r30, r22
 718:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "RADIO");
 71a:	26 e0       	ldi	r18, 0x06	; 6
 71c:	e6 e0       	ldi	r30, 0x06	; 6
 71e:	f0 e2       	ldi	r31, 0x20	; 32
 720:	dc 01       	movw	r26, r24
 722:	01 90       	ld	r0, Z+
 724:	0d 92       	st	X+, r0
 726:	2a 95       	dec	r18
 728:	e1 f7       	brne	.-8      	; 0x722 <_Z11determineIDPcR7XMEGAID+0x8c>
 72a:	08 95       	ret
	}
	else if (CHECK_DIP_SW_1() && CHECK_DIP_SW_2()){
 72c:	e0 e4       	ldi	r30, 0x40	; 64
 72e:	f6 e0       	ldi	r31, 0x06	; 6
 730:	20 85       	ldd	r18, Z+8	; 0x08
 732:	22 23       	and	r18, r18
 734:	2c f6       	brge	.-118    	; 0x6c0 <_Z11determineIDPcR7XMEGAID+0x2a>
 736:	08 95       	ret
		CurrentID = DEBUG_MODE;
 738:	23 e0       	ldi	r18, 0x03	; 3
 73a:	fb 01       	movw	r30, r22
 73c:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "DEBUG_MODE");
 73e:	2b e0       	ldi	r18, 0x0B	; 11
 740:	ec e0       	ldi	r30, 0x0C	; 12
 742:	f0 e2       	ldi	r31, 0x20	; 32
 744:	dc 01       	movw	r26, r24
 746:	01 90       	ld	r0, Z+
 748:	0d 92       	st	X+, r0
 74a:	2a 95       	dec	r18
 74c:	e1 f7       	brne	.-8      	; 0x746 <_Z11determineIDPcR7XMEGAID+0xb0>
 74e:	08 95       	ret

00000750 <__tablejump2__>:
 750:	ee 0f       	add	r30, r30
 752:	ff 1f       	adc	r31, r31

00000754 <__tablejump__>:
 754:	05 90       	lpm	r0, Z+
 756:	f4 91       	lpm	r31, Z
 758:	e0 2d       	mov	r30, r0
 75a:	19 94       	eijmp

0000075c <_exit>:
 75c:	f8 94       	cli

0000075e <__stop_program>:
 75e:	ff cf       	rjmp	.-2      	; 0x75e <__stop_program>


BasicBrainBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00802000  00000b98  00000c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  0080204e  0080204e  00000c7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c28  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b23  00000000  00000000  00004b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e8  00000000  00000000  00005645  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000764  00000000  00000000  00006930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001404  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001169  00000000  00000000  00008498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  00009601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
   2:	00 00       	nop
   4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
   6:	00 00       	nop
   8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
   a:	00 00       	nop
   c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
   e:	00 00       	nop
  10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
  12:	00 00       	nop
  14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
  16:	00 00       	nop
  18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
  1e:	00 00       	nop
  20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
  22:	00 00       	nop
  24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
  26:	00 00       	nop
  28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
  2e:	00 00       	nop
  30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
  32:	00 00       	nop
  34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
  36:	00 00       	nop
  38:	45 c1       	rjmp	.+650    	; 0x2c4 <__vector_14>
  3a:	00 00       	nop
  3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
  3e:	00 00       	nop
  40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
  42:	00 00       	nop
  44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
  46:	00 00       	nop
  48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
  4e:	00 00       	nop
  50:	21 c1       	rjmp	.+578    	; 0x294 <__vector_20>
  52:	00 00       	nop
  54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
  56:	00 00       	nop
  58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c2       	rjmp	.+1152   	; 0x4e6 <__vector_25>
  66:	00 00       	nop
  68:	45 c1       	rjmp	.+650    	; 0x2f4 <__vector_26>
  6a:	00 00       	nop
  6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
  6e:	00 00       	nop
  70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
  72:	00 00       	nop
  74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
  76:	00 00       	nop
  78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
  82:	00 00       	nop
  84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
  86:	00 00       	nop
  88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
  8e:	00 00       	nop
  90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
  92:	00 00       	nop
  94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
  96:	00 00       	nop
  98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	27 c2       	rjmp	.+1102   	; 0x538 <__vector_58>
  ea:	00 00       	nop
  ec:	4e c2       	rjmp	.+1180   	; 0x58a <__vector_59>
  ee:	00 00       	nop
  f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	73 c2       	rjmp	.+1254   	; 0x5dc <__vector_61>
  f6:	00 00       	nop
  f8:	9a c2       	rjmp	.+1332   	; 0x62e <__vector_62>
  fa:	00 00       	nop
  fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
 102:	00 00       	nop
 104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
 106:	00 00       	nop
 108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
 10e:	00 00       	nop
 110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
 112:	00 00       	nop
 114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
 116:	00 00       	nop
 118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
 11e:	00 00       	nop
 120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
 122:	00 00       	nop
 124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
 126:	00 00       	nop
 128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
 12e:	00 00       	nop
 130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
 132:	00 00       	nop
 134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
 136:	00 00       	nop
 138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
 13e:	00 00       	nop
 140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
 142:	00 00       	nop
 144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
 146:	00 00       	nop
 148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
 14e:	00 00       	nop
 150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
 152:	00 00       	nop
 154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
 156:	00 00       	nop
 158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
 15e:	00 00       	nop
 160:	33 c3       	rjmp	.+1638   	; 0x7c8 <__vector_88>
 162:	00 00       	nop
 164:	5a c3       	rjmp	.+1716   	; 0x81a <__vector_89>
 166:	00 00       	nop
 168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	db c2       	rjmp	.+1462   	; 0x724 <__vector_91>
 16e:	00 00       	nop
 170:	02 c3       	rjmp	.+1540   	; 0x776 <__vector_92>
 172:	00 00       	nop
 174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
 176:	00 00       	nop
 178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
 17e:	00 00       	nop
 180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
 182:	00 00       	nop
 184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
 186:	00 00       	nop
 188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
 18e:	00 00       	nop
 190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
 192:	00 00       	nop
 194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
 196:	00 00       	nop
 198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	51 c2       	rjmp	.+1186   	; 0x680 <__vector_119>
 1de:	00 00       	nop
 1e0:	78 c2       	rjmp	.+1264   	; 0x6d2 <__vector_120>
 1e2:	00 00       	nop
 1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
 1fa:	00 00       	nop
 1fc:	ef 04       	cpc	r14, r15
 1fe:	09 05       	cpc	r16, r9
 200:	fc 04       	cpc	r15, r12
 202:	16 05       	cpc	r17, r6
 204:	23 05       	cpc	r18, r3
 206:	30 05       	cpc	r19, r0
 208:	3d 05       	cpc	r19, r13

0000020a <__ctors_end>:
 20a:	11 24       	eor	r1, r1
 20c:	1f be       	out	0x3f, r1	; 63
 20e:	cf ef       	ldi	r28, 0xFF	; 255
 210:	cd bf       	out	0x3d, r28	; 61
 212:	df e3       	ldi	r29, 0x3F	; 63
 214:	de bf       	out	0x3e, r29	; 62
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
 21a:	10 e2       	ldi	r17, 0x20	; 32
 21c:	a0 e0       	ldi	r26, 0x00	; 0
 21e:	b0 e2       	ldi	r27, 0x20	; 32
 220:	e8 e9       	ldi	r30, 0x98	; 152
 222:	fb e0       	ldi	r31, 0x0B	; 11
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	0b bf       	out	0x3b, r16	; 59
 228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
 22a:	07 90       	elpm	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	ae 34       	cpi	r26, 0x4E	; 78
 230:	b1 07       	cpc	r27, r17
 232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
 234:	20 e2       	ldi	r18, 0x20	; 32
 236:	ae e4       	ldi	r26, 0x4E	; 78
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
 23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
 23e:	aa 3a       	cpi	r26, 0xAA	; 170
 240:	b2 07       	cpc	r27, r18
 242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
 244:	f7 d0       	rcall	.+494    	; 0x434 <main>
 246:	a6 c4       	rjmp	.+2380   	; 0xb94 <_exit>

00000248 <__bad_interrupt>:
 248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <_Z7armMainv>:
Usage Notes:
This function exists inside a while(1) so it will loop itself forever

*/
void armMain(){
	MD1_DIR_SET();
 24a:	e0 e8       	ldi	r30, 0x80	; 128
 24c:	f6 e0       	ldi	r31, 0x06	; 6
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	85 83       	std	Z+5, r24	; 0x05
	MD1_STEP_CLR();
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	39 ef       	ldi	r19, 0xF9	; 249
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <_Z7armMainv+0x12>
 264:	00 c0       	rjmp	.+0      	; 0x266 <_Z7armMainv+0x1c>
 266:	00 00       	nop
	
	while (1) {  //Main executing loop
		
		_delay_ms(10);
		
		MD1_STEP_SET();
 268:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	25 ed       	ldi	r18, 0xD5	; 213
 26c:	2a 95       	dec	r18
 26e:	f1 f7       	brne	.-4      	; 0x26c <_Z7armMainv+0x22>
 270:	00 00       	nop
		_delay_us(20);
		MD1_STEP_CLR();
 272:	86 83       	std	Z+6, r24	; 0x06
 274:	f0 cf       	rjmp	.-32     	; 0x256 <_Z7armMainv+0xc>

00000276 <_Z11armGPIOInitv>:
	}
}

void armGPIOInit(){
	//Stepper Driver 1
	PORTE.DIRSET = (PIN4_bm); //Step Pin
 276:	e0 e8       	ldi	r30, 0x80	; 128
 278:	f6 e0       	ldi	r31, 0x06	; 6
 27a:	80 e1       	ldi	r24, 0x10	; 16
 27c:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = (PIN7_bm); //Dir Pin
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = (PIN5_bm); //nEN Pin
 282:	80 e2       	ldi	r24, 0x20	; 32
 284:	81 83       	std	Z+1, r24	; 0x01
 286:	08 95       	ret

00000288 <_Z7armInitv>:
}


void armInit(){
	armGPIOInit();
 288:	f6 df       	rcall	.-20     	; 0x276 <_Z11armGPIOInitv>
	MD1_nEN_CLR();
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	e0 e8       	ldi	r30, 0x80	; 128
 28e:	f6 e0       	ldi	r31, 0x06	; 6
 290:	86 83       	std	Z+6, r24	; 0x06
 292:	08 95       	ret

00000294 <__vector_20>:

/*
Description: General-Purpose debug function. No designated function, available 
for all who program the board.
*/
void debugMain(){
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	0b b6       	in	r0, 0x3b	; 59
 2a0:	0f 92       	push	r0
 2a2:	8f 93       	push	r24
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	e0 e4       	ldi	r30, 0x40	; 64
 2ac:	f8 e0       	ldi	r31, 0x08	; 8
 2ae:	84 87       	std	Z+12, r24	; 0x0c
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	8f 91       	pop	r24
 2b6:	0f 90       	pop	r0
 2b8:	0b be       	out	0x3b, r0	; 59
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_14>:
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	0b b6       	in	r0, 0x3b	; 59
 2d0:	0f 92       	push	r0
 2d2:	8f 93       	push	r24
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	e0 e0       	ldi	r30, 0x00	; 0
 2dc:	f8 e0       	ldi	r31, 0x08	; 8
 2de:	84 87       	std	Z+12, r24	; 0x0c
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0b be       	out	0x3b, r0	; 59
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <__vector_26>:
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	0b b6       	in	r0, 0x3b	; 59
 300:	0f 92       	push	r0
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
 31a:	80 e5       	ldi	r24, 0x50	; 80
 31c:	90 e2       	ldi	r25, 0x20	; 32
 31e:	3c d3       	rcall	.+1656   	; 0x998 <USART_DataRegEmpty>
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0b be       	out	0x3b, r0	; 59
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <_Z9uart_initv>:



//Inits the UART for the board
void uart_init(void){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
 346:	e0 e4       	ldi	r30, 0x40	; 64
 348:	f6 e0       	ldi	r31, 0x06	; 6
 34a:	88 e0       	ldi	r24, 0x08	; 8
 34c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	60 ea       	ldi	r22, 0xA0	; 160
 356:	78 e0       	ldi	r23, 0x08	; 8
 358:	80 e5       	ldi	r24, 0x50	; 80
 35a:	90 e2       	ldi	r25, 0x20	; 32
 35c:	eb d2       	rcall	.+1494   	; 0x934 <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
 35e:	e0 91 50 20 	lds	r30, 0x2050
 362:	f0 91 51 20 	lds	r31, 0x2051
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
 36a:	83 81       	ldd	r24, Z+3	; 0x03
 36c:	8f 7c       	andi	r24, 0xCF	; 207
 36e:	80 61       	ori	r24, 0x10	; 16
 370:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
 372:	a0 ea       	ldi	r26, 0xA0	; 160
 374:	b8 e0       	ldi	r27, 0x08	; 8
 376:	8f ec       	ldi	r24, 0xCF	; 207
 378:	16 96       	adiw	r26, 0x06	; 6
 37a:	8c 93       	st	X, r24
 37c:	16 97       	sbiw	r26, 0x06	; 6
 37e:	17 96       	adiw	r26, 0x07	; 7
 380:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
 382:	84 81       	ldd	r24, Z+4	; 0x04
 384:	80 61       	ori	r24, 0x10	; 16
 386:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
 388:	84 81       	ldd	r24, Z+4	; 0x04
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
 38e:	e0 ea       	ldi	r30, 0xA0	; 160
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	82 81       	ldd	r24, Z+2	; 0x02
 394:	81 60       	ori	r24, 0x01	; 1
 396:	82 83       	std	Z+2, r24	; 0x02
 398:	08 95       	ret

0000039a <_Z10timer_initv>:
}

//Initializes timers
void timer_init(void){
	TCC0.PER = 100;	//period for PWM
 39a:	e0 e0       	ldi	r30, 0x00	; 0
 39c:	f8 e0       	ldi	r31, 0x08	; 8
 39e:	24 e6       	ldi	r18, 0x64	; 100
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	26 a3       	std	Z+38, r18	; 0x26
 3a4:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc; //sets the PWM base frequency by 2000000/256
 3a6:	66 e0       	ldi	r22, 0x06	; 6
 3a8:	60 83       	st	Z, r22
	TCC0.CTRLB = TC_WGMODE_SINGLESLOPE_gc; //sets the wave generation mode to single slope
 3aa:	53 e0       	ldi	r21, 0x03	; 3
 3ac:	51 83       	std	Z+1, r21	; 0x01
	TCC0.CTRLB |= (0b00110000); //output pins on red and blue LED
 3ae:	81 81       	ldd	r24, Z+1	; 0x01
 3b0:	80 63       	ori	r24, 0x30	; 48
 3b2:	81 83       	std	Z+1, r24	; 0x01
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; //interrupt register
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	46 83       	std	Z+6, r20	; 0x06
	TCC0.CCB = 10; 
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	82 a7       	std	Z+42, r24	; 0x2a
 3be:	93 a7       	std	Z+43, r25	; 0x2b
	TCC0.CCA = 50; 
 3c0:	82 e3       	ldi	r24, 0x32	; 50
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	80 a7       	std	Z+40, r24	; 0x28
 3c6:	91 a7       	std	Z+41, r25	; 0x29
	
	TCC1.PER = 100;
 3c8:	e0 e4       	ldi	r30, 0x40	; 64
 3ca:	f8 e0       	ldi	r31, 0x08	; 8
 3cc:	26 a3       	std	Z+38, r18	; 0x26
 3ce:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA = TC_CLKSEL_DIV256_gc;
 3d0:	60 83       	st	Z, r22
	TCC1.CTRLB = TC_WGMODE_SINGLESLOPE_gc;
 3d2:	51 83       	std	Z+1, r21	; 0x01
	TCC1.CTRLB |= (0b00010000); //output pins on green LED
 3d4:	21 81       	ldd	r18, Z+1	; 0x01
 3d6:	20 61       	ori	r18, 0x10	; 16
 3d8:	21 83       	std	Z+1, r18	; 0x01
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
 3da:	46 83       	std	Z+6, r20	; 0x06
	TCC1.CCA = 50;
 3dc:	80 a7       	std	Z+40, r24	; 0x28
 3de:	91 a7       	std	Z+41, r25	; 0x29
 3e0:	08 95       	ret

000003e2 <_Z12SendStringPCPc>:
}

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 81       	ld	r18, Z
 3e6:	22 23       	and	r18, r18
 3e8:	59 f0       	breq	.+22     	; 0x400 <_Z12SendStringPCPc+0x1e>
 3ea:	dc 01       	movw	r26, r24
 3ec:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
 3ee:	e0 ea       	ldi	r30, 0xA0	; 160
 3f0:	f8 e0       	ldi	r31, 0x08	; 8
 3f2:	81 81       	ldd	r24, Z+1	; 0x01
 3f4:	85 ff       	sbrs	r24, 5
 3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);
 3f8:	20 83       	st	Z, r18
	TCC1.CCA = 50;
}

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 3fa:	2d 91       	ld	r18, X+
 3fc:	21 11       	cpse	r18, r1
 3fe:	f9 cf       	rjmp	.-14     	; 0x3f2 <_Z12SendStringPCPc+0x10>
 400:	08 95       	ret

00000402 <_Z23SetXMEGA32MhzCalibratedv>:
	}
}

//Configures the XMEGA to run on it's 32Mhz internal? oscillator
void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 402:	88 ed       	ldi	r24, 0xD8	; 216
 404:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
 40c:	e0 e5       	ldi	r30, 0x50	; 80
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	81 81       	ldd	r24, Z+1	; 0x01
 412:	81 ff       	sbrs	r24, 1
 414:	fd cf       	rjmp	.-6      	; 0x410 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
 416:	88 ed       	ldi	r24, 0xD8	; 216
 418:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 420:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
 422:	e0 e5       	ldi	r30, 0x50	; 80
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	84 60       	ori	r24, 0x04	; 4
 42a:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
 42c:	81 81       	ldd	r24, Z+1	; 0x01
 42e:	82 ff       	sbrs	r24, 2
 430:	fd cf       	rjmp	.-6      	; 0x42c <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	/*
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator 
	*/
}
 432:	08 95       	ret

00000434 <main>:
			- Launch the 'main' function associated with the board
				-INFINITE LOOP

*/
int main(void)
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	2c 97       	sbiw	r28, 0x0c	; 12
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	de bf       	out	0x3e, r29	; 62
	SetXMEGA32MhzCalibrated();
 442:	df df       	rcall	.-66     	; 0x402 <_Z23SetXMEGA32MhzCalibratedv>
	//Main's Variable Declarations
	char XmegaIDStr[11];
	XMEGAID CurrentID;
		
	//Initialization Code
	uart_init();
 444:	80 df       	rcall	.-256    	; 0x346 <_Z9uart_initv>
	initializeIO();
 446:	37 d3       	rcall	.+1646   	; 0xab6 <_Z12initializeIOv>
	determineID(XmegaIDStr, CurrentID);
 448:	be 01       	movw	r22, r28
 44a:	64 5f       	subi	r22, 0xF4	; 244
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	ce 01       	movw	r24, r28
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	3d d3       	rcall	.+1658   	; 0xace <_Z11determineIDPcR7XMEGAID>
	timer_init();  //Initialize Timers
 454:	a2 df       	rcall	.-188    	; 0x39a <_Z10timer_initv>
	sei(); //Enable interrupts
 456:	78 94       	sei
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm; //draws current for ?
 458:	e0 ea       	ldi	r30, 0xA0	; 160
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	82 81       	ldd	r24, Z+2	; 0x02
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	82 83       	std	Z+2, r24	; 0x02
				RGBSetColor(YELLOW);
				char recieveChar;
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
					if (recieveChar == 'r'){
						CurrentState = MainProgram;
 462:	02 e0       	ldi	r16, 0x02	; 2
				RGBSetColor(RED);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
					if (recieveChar == 'p'){
						SendStringPC(XmegaIDStr); //Identify itself
						CurrentState = WaitForReady;
 464:	11 e0       	ldi	r17, 0x01	; 1

	
    while(1)
    { 
		
		switch (CurrentState){
 466:	90 91 4e 20 	lds	r25, 0x204E
 46a:	91 30       	cpi	r25, 0x01	; 1
 46c:	c1 f0       	breq	.+48     	; 0x49e <main+0x6a>
 46e:	18 f0       	brcs	.+6      	; 0x476 <main+0x42>
 470:	92 30       	cpi	r25, 0x02	; 2
 472:	21 f1       	breq	.+72     	; 0x4bc <main+0x88>
 474:	fa cf       	rjmp	.-12     	; 0x46a <main+0x36>
			case WaitForPing:
				RGBSetColor(RED);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	a9 d2       	rcall	.+1362   	; 0x9cc <_Z11RGBSetColor9RGBColors>
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 47a:	80 e5       	ldi	r24, 0x50	; 80
 47c:	90 e2       	ldi	r25, 0x20	; 32
 47e:	63 d2       	rcall	.+1222   	; 0x946 <USART_RXBufferData_Available>
 480:	88 23       	and	r24, r24
 482:	89 f3       	breq	.-30     	; 0x466 <main+0x32>
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
 484:	80 e5       	ldi	r24, 0x50	; 80
 486:	90 e2       	ldi	r25, 0x20	; 32
 488:	66 d2       	rcall	.+1228   	; 0x956 <USART_RXBuffer_GetByte>
 48a:	80 93 4f 20 	sts	0x204F, r24
					if (recieveChar == 'p'){
 48e:	80 37       	cpi	r24, 0x70	; 112
 490:	51 f7       	brne	.-44     	; 0x466 <main+0x32>
						SendStringPC(XmegaIDStr); //Identify itself
 492:	ce 01       	movw	r24, r28
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	a5 df       	rcall	.-182    	; 0x3e2 <_Z12SendStringPCPc>
						CurrentState = WaitForReady;
 498:	10 93 4e 20 	sts	0x204E, r17
 49c:	e4 cf       	rjmp	.-56     	; 0x466 <main+0x32>
					}
					//else, do nothing and wait for more chars
				}
				break;
			case WaitForReady:
				RGBSetColor(YELLOW);
 49e:	84 e0       	ldi	r24, 0x04	; 4
 4a0:	95 d2       	rcall	.+1322   	; 0x9cc <_Z11RGBSetColor9RGBColors>
				char recieveChar;
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 4a2:	80 e5       	ldi	r24, 0x50	; 80
 4a4:	90 e2       	ldi	r25, 0x20	; 32
 4a6:	4f d2       	rcall	.+1182   	; 0x946 <USART_RXBufferData_Available>
 4a8:	88 23       	and	r24, r24
 4aa:	e9 f2       	breq	.-70     	; 0x466 <main+0x32>
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
 4ac:	80 e5       	ldi	r24, 0x50	; 80
 4ae:	90 e2       	ldi	r25, 0x20	; 32
 4b0:	52 d2       	rcall	.+1188   	; 0x956 <USART_RXBuffer_GetByte>
					if (recieveChar == 'r'){
 4b2:	82 37       	cpi	r24, 0x72	; 114
 4b4:	c1 f6       	brne	.-80     	; 0x466 <main+0x32>
						CurrentState = MainProgram;
 4b6:	00 93 4e 20 	sts	0x204E, r16
 4ba:	d5 cf       	rjmp	.-86     	; 0x466 <main+0x32>
					}
					//else, do nothing and wait for more chars
				}
				break;
			case MainProgram:
				RGBSetColor(GREEN);
 4bc:	81 2f       	mov	r24, r17
 4be:	86 d2       	rcall	.+1292   	; 0x9cc <_Z11RGBSetColor9RGBColors>
				switch (CurrentID) {
 4c0:	9c 85       	ldd	r25, Y+12	; 0x0c
 4c2:	91 30       	cpi	r25, 0x01	; 1
 4c4:	49 f0       	breq	.+18     	; 0x4d8 <main+0xa4>
 4c6:	28 f0       	brcs	.+10     	; 0x4d2 <main+0x9e>
 4c8:	92 30       	cpi	r25, 0x02	; 2
 4ca:	49 f0       	breq	.+18     	; 0x4de <main+0xaa>
 4cc:	93 30       	cpi	r25, 0x03	; 3
 4ce:	51 f0       	breq	.+20     	; 0x4e4 <main+0xb0>
 4d0:	ca cf       	rjmp	.-108    	; 0x466 <main+0x32>
					case DRIVE:
						driveInit();
 4d2:	cc d1       	rcall	.+920    	; 0x86c <_Z9driveInitv>
						while (1) {
							driveMain();
 4d4:	01 d2       	rcall	.+1026   	; 0x8d8 <_Z9driveMainv>
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <main+0xa0>
						}
						break;
					case ARM:
						armInit();
 4d8:	d7 de       	rcall	.-594    	; 0x288 <_Z7armInitv>
						while (1) {
							armMain();
 4da:	b7 de       	rcall	.-658    	; 0x24a <_Z7armMainv>
 4dc:	fe cf       	rjmp	.-4      	; 0x4da <main+0xa6>
						}
						break;
					case RADIO:
						radioInit();
 4de:	29 d2       	rcall	.+1106   	; 0x932 <_Z9radioInitv>
						while (1) {
							radioMain();
 4e0:	27 d2       	rcall	.+1102   	; 0x930 <_Z9radioMainv>
 4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <main+0xac>
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <main+0xb0>

000004e6 <__vector_25>:
 */ 

#include "ComputerInterface.h"

//Interrupt when anything is recieved
ISR(USARTC0_RXC_vect){
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	0b b6       	in	r0, 0x3b	; 59
 4f2:	0f 92       	push	r0
 4f4:	2f 93       	push	r18
 4f6:	3f 93       	push	r19
 4f8:	4f 93       	push	r20
 4fa:	5f 93       	push	r21
 4fc:	6f 93       	push	r22
 4fe:	7f 93       	push	r23
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
 50c:	80 e5       	ldi	r24, 0x50	; 80
 50e:	90 e2       	ldi	r25, 0x20	; 32
 510:	2e d2       	rcall	.+1116   	; 0x96e <USART_RXComplete>
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0b be       	out	0x3b, r0	; 59
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <__vector_58>:
		while(!USART_IsTXDataRegisterEmpty(&USARTE1));
		USART_PutChar(&USARTE1, present[i]);
	}
}
void SendStringSABER_TRES(char *present){
	for(int i = 0 ; present[i] != '\0' ; i++){
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	0b b6       	in	r0, 0x3b	; 59
 544:	0f 92       	push	r0
 546:	2f 93       	push	r18
 548:	3f 93       	push	r19
 54a:	4f 93       	push	r20
 54c:	5f 93       	push	r21
 54e:	6f 93       	push	r22
 550:	7f 93       	push	r23
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	af 93       	push	r26
 558:	bf 93       	push	r27
 55a:	ef 93       	push	r30
 55c:	ff 93       	push	r31
 55e:	8b e9       	ldi	r24, 0x9B	; 155
 560:	90 e2       	ldi	r25, 0x20	; 32
 562:	05 d2       	rcall	.+1034   	; 0x96e <USART_RXComplete>
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	0b be       	out	0x3b, r0	; 59
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <__vector_59>:
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	0b b6       	in	r0, 0x3b	; 59
 596:	0f 92       	push	r0
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
 5b0:	8b e9       	ldi	r24, 0x9B	; 155
 5b2:	90 e2       	ldi	r25, 0x20	; 32
 5b4:	f1 d1       	rcall	.+994    	; 0x998 <USART_DataRegEmpty>
 5b6:	ff 91       	pop	r31
 5b8:	ef 91       	pop	r30
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	7f 91       	pop	r23
 5c4:	6f 91       	pop	r22
 5c6:	5f 91       	pop	r21
 5c8:	4f 91       	pop	r20
 5ca:	3f 91       	pop	r19
 5cc:	2f 91       	pop	r18
 5ce:	0f 90       	pop	r0
 5d0:	0b be       	out	0x3b, r0	; 59
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <__vector_61>:
 5dc:	1f 92       	push	r1
 5de:	0f 92       	push	r0
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	0b b6       	in	r0, 0x3b	; 59
 5e8:	0f 92       	push	r0
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
 602:	8c e8       	ldi	r24, 0x8C	; 140
 604:	90 e2       	ldi	r25, 0x20	; 32
 606:	b3 d1       	rcall	.+870    	; 0x96e <USART_RXComplete>
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	bf 91       	pop	r27
 60e:	af 91       	pop	r26
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	7f 91       	pop	r23
 616:	6f 91       	pop	r22
 618:	5f 91       	pop	r21
 61a:	4f 91       	pop	r20
 61c:	3f 91       	pop	r19
 61e:	2f 91       	pop	r18
 620:	0f 90       	pop	r0
 622:	0b be       	out	0x3b, r0	; 59
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__vector_62>:
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	0b b6       	in	r0, 0x3b	; 59
 63a:	0f 92       	push	r0
 63c:	2f 93       	push	r18
 63e:	3f 93       	push	r19
 640:	4f 93       	push	r20
 642:	5f 93       	push	r21
 644:	6f 93       	push	r22
 646:	7f 93       	push	r23
 648:	8f 93       	push	r24
 64a:	9f 93       	push	r25
 64c:	af 93       	push	r26
 64e:	bf 93       	push	r27
 650:	ef 93       	push	r30
 652:	ff 93       	push	r31
 654:	8c e8       	ldi	r24, 0x8C	; 140
 656:	90 e2       	ldi	r25, 0x20	; 32
 658:	9f d1       	rcall	.+830    	; 0x998 <USART_DataRegEmpty>
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0b be       	out	0x3b, r0	; 59
 676:	0f 90       	pop	r0
 678:	0f be       	out	0x3f, r0	; 63
 67a:	0f 90       	pop	r0
 67c:	1f 90       	pop	r1
 67e:	18 95       	reti

00000680 <__vector_119>:
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	0b b6       	in	r0, 0x3b	; 59
 68c:	0f 92       	push	r0
 68e:	2f 93       	push	r18
 690:	3f 93       	push	r19
 692:	4f 93       	push	r20
 694:	5f 93       	push	r21
 696:	6f 93       	push	r22
 698:	7f 93       	push	r23
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25
 69e:	af 93       	push	r26
 6a0:	bf 93       	push	r27
 6a2:	ef 93       	push	r30
 6a4:	ff 93       	push	r31
 6a6:	8d e7       	ldi	r24, 0x7D	; 125
 6a8:	90 e2       	ldi	r25, 0x20	; 32
 6aa:	61 d1       	rcall	.+706    	; 0x96e <USART_RXComplete>
 6ac:	ff 91       	pop	r31
 6ae:	ef 91       	pop	r30
 6b0:	bf 91       	pop	r27
 6b2:	af 91       	pop	r26
 6b4:	9f 91       	pop	r25
 6b6:	8f 91       	pop	r24
 6b8:	7f 91       	pop	r23
 6ba:	6f 91       	pop	r22
 6bc:	5f 91       	pop	r21
 6be:	4f 91       	pop	r20
 6c0:	3f 91       	pop	r19
 6c2:	2f 91       	pop	r18
 6c4:	0f 90       	pop	r0
 6c6:	0b be       	out	0x3b, r0	; 59
 6c8:	0f 90       	pop	r0
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	0f 90       	pop	r0
 6ce:	1f 90       	pop	r1
 6d0:	18 95       	reti

000006d2 <__vector_120>:
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
 6dc:	0b b6       	in	r0, 0x3b	; 59
 6de:	0f 92       	push	r0
 6e0:	2f 93       	push	r18
 6e2:	3f 93       	push	r19
 6e4:	4f 93       	push	r20
 6e6:	5f 93       	push	r21
 6e8:	6f 93       	push	r22
 6ea:	7f 93       	push	r23
 6ec:	8f 93       	push	r24
 6ee:	9f 93       	push	r25
 6f0:	af 93       	push	r26
 6f2:	bf 93       	push	r27
 6f4:	ef 93       	push	r30
 6f6:	ff 93       	push	r31
 6f8:	8d e7       	ldi	r24, 0x7D	; 125
 6fa:	90 e2       	ldi	r25, 0x20	; 32
 6fc:	4d d1       	rcall	.+666    	; 0x998 <USART_DataRegEmpty>
 6fe:	ff 91       	pop	r31
 700:	ef 91       	pop	r30
 702:	bf 91       	pop	r27
 704:	af 91       	pop	r26
 706:	9f 91       	pop	r25
 708:	8f 91       	pop	r24
 70a:	7f 91       	pop	r23
 70c:	6f 91       	pop	r22
 70e:	5f 91       	pop	r21
 710:	4f 91       	pop	r20
 712:	3f 91       	pop	r19
 714:	2f 91       	pop	r18
 716:	0f 90       	pop	r0
 718:	0b be       	out	0x3b, r0	; 59
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <__vector_91>:
 724:	1f 92       	push	r1
 726:	0f 92       	push	r0
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	0f 92       	push	r0
 72c:	11 24       	eor	r1, r1
 72e:	0b b6       	in	r0, 0x3b	; 59
 730:	0f 92       	push	r0
 732:	2f 93       	push	r18
 734:	3f 93       	push	r19
 736:	4f 93       	push	r20
 738:	5f 93       	push	r21
 73a:	6f 93       	push	r22
 73c:	7f 93       	push	r23
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	ef 93       	push	r30
 748:	ff 93       	push	r31
 74a:	8e e6       	ldi	r24, 0x6E	; 110
 74c:	90 e2       	ldi	r25, 0x20	; 32
 74e:	0f d1       	rcall	.+542    	; 0x96e <USART_RXComplete>
 750:	ff 91       	pop	r31
 752:	ef 91       	pop	r30
 754:	bf 91       	pop	r27
 756:	af 91       	pop	r26
 758:	9f 91       	pop	r25
 75a:	8f 91       	pop	r24
 75c:	7f 91       	pop	r23
 75e:	6f 91       	pop	r22
 760:	5f 91       	pop	r21
 762:	4f 91       	pop	r20
 764:	3f 91       	pop	r19
 766:	2f 91       	pop	r18
 768:	0f 90       	pop	r0
 76a:	0b be       	out	0x3b, r0	; 59
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <__vector_92>:
 776:	1f 92       	push	r1
 778:	0f 92       	push	r0
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	0f 92       	push	r0
 77e:	11 24       	eor	r1, r1
 780:	0b b6       	in	r0, 0x3b	; 59
 782:	0f 92       	push	r0
 784:	2f 93       	push	r18
 786:	3f 93       	push	r19
 788:	4f 93       	push	r20
 78a:	5f 93       	push	r21
 78c:	6f 93       	push	r22
 78e:	7f 93       	push	r23
 790:	8f 93       	push	r24
 792:	9f 93       	push	r25
 794:	af 93       	push	r26
 796:	bf 93       	push	r27
 798:	ef 93       	push	r30
 79a:	ff 93       	push	r31
 79c:	8e e6       	ldi	r24, 0x6E	; 110
 79e:	90 e2       	ldi	r25, 0x20	; 32
 7a0:	fb d0       	rcall	.+502    	; 0x998 <USART_DataRegEmpty>
 7a2:	ff 91       	pop	r31
 7a4:	ef 91       	pop	r30
 7a6:	bf 91       	pop	r27
 7a8:	af 91       	pop	r26
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	7f 91       	pop	r23
 7b0:	6f 91       	pop	r22
 7b2:	5f 91       	pop	r21
 7b4:	4f 91       	pop	r20
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0b be       	out	0x3b, r0	; 59
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <__vector_88>:
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	0b b6       	in	r0, 0x3b	; 59
 7d4:	0f 92       	push	r0
 7d6:	2f 93       	push	r18
 7d8:	3f 93       	push	r19
 7da:	4f 93       	push	r20
 7dc:	5f 93       	push	r21
 7de:	6f 93       	push	r22
 7e0:	7f 93       	push	r23
 7e2:	8f 93       	push	r24
 7e4:	9f 93       	push	r25
 7e6:	af 93       	push	r26
 7e8:	bf 93       	push	r27
 7ea:	ef 93       	push	r30
 7ec:	ff 93       	push	r31
 7ee:	8f e5       	ldi	r24, 0x5F	; 95
 7f0:	90 e2       	ldi	r25, 0x20	; 32
 7f2:	bd d0       	rcall	.+378    	; 0x96e <USART_RXComplete>
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0b be       	out	0x3b, r0	; 59
 810:	0f 90       	pop	r0
 812:	0f be       	out	0x3f, r0	; 63
 814:	0f 90       	pop	r0
 816:	1f 90       	pop	r1
 818:	18 95       	reti

0000081a <__vector_89>:
 81a:	1f 92       	push	r1
 81c:	0f 92       	push	r0
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	0f 92       	push	r0
 822:	11 24       	eor	r1, r1
 824:	0b b6       	in	r0, 0x3b	; 59
 826:	0f 92       	push	r0
 828:	2f 93       	push	r18
 82a:	3f 93       	push	r19
 82c:	4f 93       	push	r20
 82e:	5f 93       	push	r21
 830:	6f 93       	push	r22
 832:	7f 93       	push	r23
 834:	8f 93       	push	r24
 836:	9f 93       	push	r25
 838:	af 93       	push	r26
 83a:	bf 93       	push	r27
 83c:	ef 93       	push	r30
 83e:	ff 93       	push	r31
 840:	8f e5       	ldi	r24, 0x5F	; 95
 842:	90 e2       	ldi	r25, 0x20	; 32
 844:	a9 d0       	rcall	.+338    	; 0x998 <USART_DataRegEmpty>
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	7f 91       	pop	r23
 854:	6f 91       	pop	r22
 856:	5f 91       	pop	r21
 858:	4f 91       	pop	r20
 85a:	3f 91       	pop	r19
 85c:	2f 91       	pop	r18
 85e:	0f 90       	pop	r0
 860:	0b be       	out	0x3b, r0	; 59
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	0f 90       	pop	r0
 868:	1f 90       	pop	r1
 86a:	18 95       	reti

0000086c <_Z9driveInitv>:
 86c:	08 95       	ret

0000086e <_Z19SendStringSABER_UNOPc>:
 86e:	fc 01       	movw	r30, r24
 870:	20 81       	ld	r18, Z
 872:	22 23       	and	r18, r18
 874:	59 f0       	breq	.+22     	; 0x88c <_Z19SendStringSABER_UNOPc+0x1e>
 876:	dc 01       	movw	r26, r24
 878:	11 96       	adiw	r26, 0x01	; 1
 87a:	e0 ea       	ldi	r30, 0xA0	; 160
 87c:	fa e0       	ldi	r31, 0x0A	; 10
 87e:	81 81       	ldd	r24, Z+1	; 0x01
 880:	85 ff       	sbrs	r24, 5
 882:	fd cf       	rjmp	.-6      	; 0x87e <_Z19SendStringSABER_UNOPc+0x10>
 884:	20 83       	st	Z, r18
 886:	2d 91       	ld	r18, X+
 888:	21 11       	cpse	r18, r1
 88a:	f9 cf       	rjmp	.-14     	; 0x87e <_Z19SendStringSABER_UNOPc+0x10>
 88c:	08 95       	ret

0000088e <_Z14Saber_init_unov>:


//DRIVE INIT START
//May want to check init dos y tres to make sure that they were correctly altered from uno for their respective pins
void Saber_init_uno(){	//USARTE0
	PORTE.DIRSET = PIN3_bm;																			//Sets TX Pin as output
 88e:	e0 e8       	ldi	r30, 0x80	; 128
 890:	f6 e0       	ldi	r31, 0x06	; 6
 892:	88 e0       	ldi	r24, 0x08	; 8
 894:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN2_bm;																			//Sets RX pin as input
 896:	84 e0       	ldi	r24, 0x04	; 4
 898:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&SABER_UNO, &USARTE0, USART_DREINTLVL_LO_gc);				//Initialize USARTE0 as interrupt driven serial and clear it's buffers
 89a:	41 e0       	ldi	r20, 0x01	; 1
 89c:	60 ea       	ldi	r22, 0xA0	; 160
 89e:	7a e0       	ldi	r23, 0x0A	; 10
 8a0:	8b e9       	ldi	r24, 0x9B	; 155
 8a2:	90 e2       	ldi	r25, 0x20	; 32
 8a4:	47 d0       	rcall	.+142    	; 0x934 <USART_InterruptDriver_Initialize>
	USART_Format_Set(SABER_UNO.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
 8a6:	e0 91 9b 20 	lds	r30, 0x209B
 8aa:	f0 91 9c 20 	lds	r31, 0x209C
 8ae:	83 e0       	ldi	r24, 0x03	; 3
 8b0:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(SABER_UNO.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
 8b2:	83 81       	ldd	r24, Z+3	; 0x03
 8b4:	8f 7c       	andi	r24, 0xCF	; 207
 8b6:	80 61       	ori	r24, 0x10	; 16
 8b8:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTE0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
 8ba:	a0 ea       	ldi	r26, 0xA0	; 160
 8bc:	ba e0       	ldi	r27, 0x0A	; 10
 8be:	8f ec       	ldi	r24, 0xCF	; 207
 8c0:	16 96       	adiw	r26, 0x06	; 6
 8c2:	8c 93       	st	X, r24
 8c4:	16 97       	sbiw	r26, 0x06	; 6
 8c6:	17 96       	adiw	r26, 0x07	; 7
 8c8:	1c 92       	st	X, r1
	USART_Rx_Enable(SABER_UNO.usart);															//Enable receiving over serial
 8ca:	84 81       	ldd	r24, Z+4	; 0x04
 8cc:	80 61       	ori	r24, 0x10	; 16
 8ce:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(SABER_UNO.usart);															//Enable transmitting over serial
 8d0:	84 81       	ldd	r24, Z+4	; 0x04
 8d2:	88 60       	ori	r24, 0x08	; 8
 8d4:	84 83       	std	Z+4, r24	; 0x04
 8d6:	08 95       	ret

000008d8 <_Z9driveMainv>:
	
	//while(1){
		//SendStringSABER_UNO("1,s10\n");
	//	SendStringPC("Sent to saber\n");
	//}
	Saber_init_uno();
 8d8:	da df       	rcall	.-76     	; 0x88e <_Z14Saber_init_unov>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8da:	2f ef       	ldi	r18, 0xFF	; 255
 8dc:	87 ea       	ldi	r24, 0xA7	; 167
 8de:	91 e6       	ldi	r25, 0x61	; 97
 8e0:	21 50       	subi	r18, 0x01	; 1
 8e2:	80 40       	sbci	r24, 0x00	; 0
 8e4:	90 40       	sbci	r25, 0x00	; 0
 8e6:	e1 f7       	brne	.-8      	; 0x8e0 <_Z9driveMainv+0x8>
 8e8:	00 c0       	rjmp	.+0      	; 0x8ea <_Z9driveMainv+0x12>
 8ea:	00 00       	nop
	
	_delay_ms(1000);
	SendStringSABER_UNO("1,start \n");
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	90 e2       	ldi	r25, 0x20	; 32
 8f0:	be df       	rcall	.-132    	; 0x86e <_Z19SendStringSABER_UNOPc>
 8f2:	2f ef       	ldi	r18, 0xFF	; 255
 8f4:	87 ea       	ldi	r24, 0xA7	; 167
 8f6:	91 e6       	ldi	r25, 0x61	; 97
 8f8:	21 50       	subi	r18, 0x01	; 1
 8fa:	80 40       	sbci	r24, 0x00	; 0
 8fc:	90 40       	sbci	r25, 0x00	; 0
 8fe:	e1 f7       	brne	.-8      	; 0x8f8 <_Z9driveMainv+0x20>
 900:	00 c0       	rjmp	.+0      	; 0x902 <_Z9driveMainv+0x2a>
 902:	00 00       	nop
	_delay_ms(1000);
	SendStringSABER_UNO("1,units ");
 904:	8a e0       	ldi	r24, 0x0A	; 10
 906:	90 e2       	ldi	r25, 0x20	; 32
 908:	b2 df       	rcall	.-156    	; 0x86e <_Z19SendStringSABER_UNOPc>
	SendStringSABER_UNO(("1 rotation = 2000 "));
 90a:	83 e1       	ldi	r24, 0x13	; 19
 90c:	90 e2       	ldi	r25, 0x20	; 32
 90e:	af df       	rcall	.-162    	; 0x86e <_Z19SendStringSABER_UNOPc>
	SendStringSABER_UNO("lines \n");
 910:	86 e2       	ldi	r24, 0x26	; 38
 912:	90 e2       	ldi	r25, 0x20	; 32
 914:	ac df       	rcall	.-168    	; 0x86e <_Z19SendStringSABER_UNOPc>
 916:	2f ef       	ldi	r18, 0xFF	; 255
 918:	87 ea       	ldi	r24, 0xA7	; 167
 91a:	91 e6       	ldi	r25, 0x61	; 97
 91c:	21 50       	subi	r18, 0x01	; 1
 91e:	80 40       	sbci	r24, 0x00	; 0
 920:	90 40       	sbci	r25, 0x00	; 0
 922:	e1 f7       	brne	.-8      	; 0x91c <_Z9driveMainv+0x44>
 924:	00 c0       	rjmp	.+0      	; 0x926 <_Z9driveMainv+0x4e>
 926:	00 00       	nop
	_delay_ms(1000);
	SendStringSABER_UNO("1,s10 \n");
 928:	8e e2       	ldi	r24, 0x2E	; 46
 92a:	90 e2       	ldi	r25, 0x20	; 32
 92c:	a0 df       	rcall	.-192    	; 0x86e <_Z19SendStringSABER_UNOPc>
 92e:	ff cf       	rjmp	.-2      	; 0x92e <_Z9driveMainv+0x56>

00000930 <_Z9radioMainv>:

Usage Notes:
This function exists inside a while(1) so it will loop itself forever

*/
void radioMain(){
 930:	08 95       	ret

00000932 <_Z9radioInitv>:
	
}


void radioInit(){
 932:	08 95       	ret

00000934 <USART_InterruptDriver_Initialize>:
		tempCTRLA = usart_data->usart->CTRLA;
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
		usart_data->usart->CTRLA = tempCTRLA;
	}
	return TXBuffer_FreeSpace;
}
 934:	fc 01       	movw	r30, r24
 936:	60 83       	st	Z, r22
 938:	71 83       	std	Z+1, r23	; 0x01
 93a:	42 83       	std	Z+2, r20	; 0x02
 93c:	14 86       	std	Z+12, r1	; 0x0c
 93e:	13 86       	std	Z+11, r1	; 0x0b
 940:	16 86       	std	Z+14, r1	; 0x0e
 942:	15 86       	std	Z+13, r1	; 0x0d
 944:	08 95       	ret

00000946 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 946:	fc 01       	movw	r30, r24
 948:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 94a:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	29 13       	cpse	r18, r25
 950:	01 c0       	rjmp	.+2      	; 0x954 <USART_RXBufferData_Available+0xe>
 952:	80 e0       	ldi	r24, 0x00	; 0
}
 954:	08 95       	ret

00000956 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 956:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 958:	84 85       	ldd	r24, Z+12	; 0x0c
 95a:	df 01       	movw	r26, r30
 95c:	a8 0f       	add	r26, r24
 95e:	b1 1d       	adc	r27, r1
 960:	13 96       	adiw	r26, 0x03	; 3
 962:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 964:	94 85       	ldd	r25, Z+12	; 0x0c
 966:	9f 5f       	subi	r25, 0xFF	; 255
 968:	93 70       	andi	r25, 0x03	; 3
 96a:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 96c:	08 95       	ret

0000096e <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 96e:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 970:	83 85       	ldd	r24, Z+11	; 0x0b
 972:	8f 5f       	subi	r24, 0xFF	; 255
 974:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 976:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 978:	a0 81       	ld	r26, Z
 97a:	b1 81       	ldd	r27, Z+1	; 0x01
 97c:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 97e:	89 17       	cp	r24, r25
 980:	49 f0       	breq	.+18     	; 0x994 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 982:	93 85       	ldd	r25, Z+11	; 0x0b
 984:	df 01       	movw	r26, r30
 986:	a9 0f       	add	r26, r25
 988:	b1 1d       	adc	r27, r1
 98a:	13 96       	adiw	r26, 0x03	; 3
 98c:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 98e:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 994:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 996:	08 95       	ret

00000998 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 998:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 99a:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 99c:	95 85       	ldd	r25, Z+13	; 0x0d
 99e:	98 13       	cpse	r25, r24
 9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 9a2:	01 90       	ld	r0, Z+
 9a4:	f0 81       	ld	r31, Z
 9a6:	e0 2d       	mov	r30, r0
 9a8:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 9aa:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 9ac:	83 83       	std	Z+3, r24	; 0x03
 9ae:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 9b0:	86 85       	ldd	r24, Z+14	; 0x0e
 9b2:	df 01       	movw	r26, r30
 9b4:	a8 0f       	add	r26, r24
 9b6:	b1 1d       	adc	r27, r1
 9b8:	17 96       	adiw	r26, 0x07	; 7
 9ba:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 9bc:	a0 81       	ld	r26, Z
 9be:	b1 81       	ldd	r27, Z+1	; 0x01
 9c0:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 9c2:	86 85       	ldd	r24, Z+14	; 0x0e
 9c4:	8f 5f       	subi	r24, 0xFF	; 255
 9c6:	83 70       	andi	r24, 0x03	; 3
 9c8:	86 87       	std	Z+14, r24	; 0x0e
 9ca:	08 95       	ret

000009cc <_Z11RGBSetColor9RGBColors>:
#include <avr/io.h>

//This function handles making colors on the RGB LED
//Author: Nick McComb
void RGBSetColor(RGBColors choice){
	switch(choice){
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	87 30       	cpi	r24, 0x07	; 7
 9d0:	91 05       	cpc	r25, r1
 9d2:	08 f0       	brcs	.+2      	; 0x9d6 <_Z11RGBSetColor9RGBColors+0xa>
 9d4:	63 c0       	rjmp	.+198    	; 0xa9c <_Z11RGBSetColor9RGBColors+0xd0>
 9d6:	fc 01       	movw	r30, r24
 9d8:	e2 50       	subi	r30, 0x02	; 2
 9da:	ff 4f       	sbci	r31, 0xFF	; 255
 9dc:	d5 c0       	rjmp	.+426    	; 0xb88 <__tablejump2__>
		case RED:
			TCC0.CCA = 0;
 9de:	e0 e0       	ldi	r30, 0x00	; 0
 9e0:	f8 e0       	ldi	r31, 0x08	; 8
 9e2:	10 a6       	std	Z+40, r1	; 0x28
 9e4:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = COLOR_ON;
 9e6:	82 e3       	ldi	r24, 0x32	; 50
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	82 a7       	std	Z+42, r24	; 0x2a
 9ec:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = 0;
 9ee:	e0 e4       	ldi	r30, 0x40	; 64
 9f0:	f8 e0       	ldi	r31, 0x08	; 8
 9f2:	10 a6       	std	Z+40, r1	; 0x28
 9f4:	11 a6       	std	Z+41, r1	; 0x29
			break;
 9f6:	08 95       	ret
		case BLUE:
			TCC0.CCA = COLOR_ON;
 9f8:	e0 e0       	ldi	r30, 0x00	; 0
 9fa:	f8 e0       	ldi	r31, 0x08	; 8
 9fc:	82 e3       	ldi	r24, 0x32	; 50
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	80 a7       	std	Z+40, r24	; 0x28
 a02:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = 0;
 a04:	12 a6       	std	Z+42, r1	; 0x2a
 a06:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = 0;
 a08:	e0 e4       	ldi	r30, 0x40	; 64
 a0a:	f8 e0       	ldi	r31, 0x08	; 8
 a0c:	10 a6       	std	Z+40, r1	; 0x28
 a0e:	11 a6       	std	Z+41, r1	; 0x29
			break;
 a10:	08 95       	ret
		case GREEN:
			TCC0.CCA = 0;
 a12:	e0 e0       	ldi	r30, 0x00	; 0
 a14:	f8 e0       	ldi	r31, 0x08	; 8
 a16:	10 a6       	std	Z+40, r1	; 0x28
 a18:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = 0;
 a1a:	12 a6       	std	Z+42, r1	; 0x2a
 a1c:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = COLOR_ON;
 a1e:	82 e3       	ldi	r24, 0x32	; 50
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	e0 e4       	ldi	r30, 0x40	; 64
 a24:	f8 e0       	ldi	r31, 0x08	; 8
 a26:	80 a7       	std	Z+40, r24	; 0x28
 a28:	91 a7       	std	Z+41, r25	; 0x29
			break;
 a2a:	08 95       	ret
		case PURPLE:
			TCC0.CCA = COLOR_ON;
 a2c:	e0 e0       	ldi	r30, 0x00	; 0
 a2e:	f8 e0       	ldi	r31, 0x08	; 8
 a30:	82 e3       	ldi	r24, 0x32	; 50
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	80 a7       	std	Z+40, r24	; 0x28
 a36:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = COLOR_ON;
 a38:	82 a7       	std	Z+42, r24	; 0x2a
 a3a:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = 0;
 a3c:	e0 e4       	ldi	r30, 0x40	; 64
 a3e:	f8 e0       	ldi	r31, 0x08	; 8
 a40:	10 a6       	std	Z+40, r1	; 0x28
 a42:	11 a6       	std	Z+41, r1	; 0x29
			break;
 a44:	08 95       	ret
		case YELLOW:
			TCC0.CCA = 0;
 a46:	e0 e0       	ldi	r30, 0x00	; 0
 a48:	f8 e0       	ldi	r31, 0x08	; 8
 a4a:	10 a6       	std	Z+40, r1	; 0x28
 a4c:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = COLOR_ON;
 a4e:	82 e3       	ldi	r24, 0x32	; 50
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	82 a7       	std	Z+42, r24	; 0x2a
 a54:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON;
 a56:	e0 e4       	ldi	r30, 0x40	; 64
 a58:	f8 e0       	ldi	r31, 0x08	; 8
 a5a:	80 a7       	std	Z+40, r24	; 0x28
 a5c:	91 a7       	std	Z+41, r25	; 0x29
			break;
 a5e:	08 95       	ret
		case WHITE:
			TCC0.CCA = COLOR_ON;
 a60:	e0 e0       	ldi	r30, 0x00	; 0
 a62:	f8 e0       	ldi	r31, 0x08	; 8
 a64:	82 e3       	ldi	r24, 0x32	; 50
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	80 a7       	std	Z+40, r24	; 0x28
 a6a:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = COLOR_ON;
 a6c:	82 a7       	std	Z+42, r24	; 0x2a
 a6e:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON;
 a70:	e0 e4       	ldi	r30, 0x40	; 64
 a72:	f8 e0       	ldi	r31, 0x08	; 8
 a74:	80 a7       	std	Z+40, r24	; 0x28
 a76:	91 a7       	std	Z+41, r25	; 0x29
			break;
 a78:	08 95       	ret
		case ORANGE:
			TCC0.CCB = COLOR_ON;      //Red
 a7a:	e0 e0       	ldi	r30, 0x00	; 0
 a7c:	f8 e0       	ldi	r31, 0x08	; 8
 a7e:	82 e3       	ldi	r24, 0x32	; 50
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	82 a7       	std	Z+42, r24	; 0x2a
 a84:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON / 2;  //Green
 a86:	89 e1       	ldi	r24, 0x19	; 25
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	a0 e4       	ldi	r26, 0x40	; 64
 a8c:	b8 e0       	ldi	r27, 0x08	; 8
 a8e:	98 96       	adiw	r26, 0x28	; 40
 a90:	8d 93       	st	X+, r24
 a92:	9c 93       	st	X, r25
 a94:	99 97       	sbiw	r26, 0x29	; 41
			TCC0.CCA = 0;             //Blue
 a96:	10 a6       	std	Z+40, r1	; 0x28
 a98:	11 a6       	std	Z+41, r1	; 0x29
			break;
 a9a:	08 95       	ret
		case OFF:
		default:
			TCC0.CCB = 0;  //Red
 a9c:	e0 e0       	ldi	r30, 0x00	; 0
 a9e:	f8 e0       	ldi	r31, 0x08	; 8
 aa0:	12 a6       	std	Z+42, r1	; 0x2a
 aa2:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = 0;  //Green
 aa4:	a0 e4       	ldi	r26, 0x40	; 64
 aa6:	b8 e0       	ldi	r27, 0x08	; 8
 aa8:	98 96       	adiw	r26, 0x28	; 40
 aaa:	1d 92       	st	X+, r1
 aac:	1c 92       	st	X, r1
 aae:	99 97       	sbiw	r26, 0x29	; 41
			TCC0.CCA = 0;  //Blue
 ab0:	10 a6       	std	Z+40, r1	; 0x28
 ab2:	11 a6       	std	Z+41, r1	; 0x29
 ab4:	08 95       	ret

00000ab6 <_Z12initializeIOv>:


//Initializes all I/O for the board
//Sets up DIR, and PULLUP/PULLDOWN Resistors, etc.
void initializeIO(){
	PORTC.DIRSET = (PIN5_bm); //Sets output LED (status/error)
 ab6:	e0 e4       	ldi	r30, 0x40	; 64
 ab8:	f6 e0       	ldi	r31, 0x06	; 6
 aba:	80 e2       	ldi	r24, 0x20	; 32
 abc:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = (PIN0_bm | PIN1_bm | PIN4_bm); //Set RGB Led outputs
 abe:	83 e1       	ldi	r24, 0x13	; 19
 ac0:	81 83       	std	Z+1, r24	; 0x01
	
	PORTC.DIRCLR = (PIN6_bm | PIN7_bm); //Sets DIP Switch Input
 ac2:	80 ec       	ldi	r24, 0xC0	; 192
 ac4:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
 ac6:	88 e1       	ldi	r24, 0x18	; 24
 ac8:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
 aca:	87 8b       	std	Z+23, r24	; 0x17
 acc:	08 95       	ret

00000ace <_Z11determineIDPcR7XMEGAID>:

//This function handles determining the ID of the board, and putting
//the identification string in its variable
//Author: Nick M
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 ace:	e0 e4       	ldi	r30, 0x40	; 64
 ad0:	f6 e0       	ldi	r31, 0x06	; 6
 ad2:	20 85       	ldd	r18, Z+8	; 0x08
 ad4:	22 23       	and	r18, r18
 ad6:	b4 f4       	brge	.+44     	; 0xb04 <_Z11determineIDPcR7XMEGAID+0x36>
 ad8:	20 85       	ldd	r18, Z+8	; 0x08
 ada:	26 fd       	sbrc	r18, 6
 adc:	19 c0       	rjmp	.+50     	; 0xb10 <_Z11determineIDPcR7XMEGAID+0x42>
 ade:	12 c0       	rjmp	.+36     	; 0xb04 <_Z11determineIDPcR7XMEGAID+0x36>
		CurrentID = DRIVE;
		strcpy(XmegaIDStr, "DRIVE");
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
 ae0:	e0 e4       	ldi	r30, 0x40	; 64
 ae2:	f6 e0       	ldi	r31, 0x06	; 6
 ae4:	20 85       	ldd	r18, Z+8	; 0x08
 ae6:	26 ff       	sbrs	r18, 6
 ae8:	1e c0       	rjmp	.+60     	; 0xb26 <_Z11determineIDPcR7XMEGAID+0x58>
 aea:	2a c0       	rjmp	.+84     	; 0xb40 <_Z11determineIDPcR7XMEGAID+0x72>
		CurrentID = ARM;
		strcpy(XmegaIDStr, "ARM");
	}
	else if (CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 aec:	e0 e4       	ldi	r30, 0x40	; 64
 aee:	f6 e0       	ldi	r31, 0x06	; 6
 af0:	20 85       	ldd	r18, Z+8	; 0x08
 af2:	26 fd       	sbrc	r18, 6
 af4:	2b c0       	rjmp	.+86     	; 0xb4c <_Z11determineIDPcR7XMEGAID+0x7e>
 af6:	36 c0       	rjmp	.+108    	; 0xb64 <_Z11determineIDPcR7XMEGAID+0x96>
		CurrentID = RADIO;
		strcpy(XmegaIDStr, "RADIO");
	}
	else if (CHECK_DIP_SW_1() && CHECK_DIP_SW_2()){
 af8:	e0 e4       	ldi	r30, 0x40	; 64
 afa:	f6 e0       	ldi	r31, 0x06	; 6
 afc:	20 85       	ldd	r18, Z+8	; 0x08
 afe:	26 ff       	sbrs	r18, 6
 b00:	37 c0       	rjmp	.+110    	; 0xb70 <_Z11determineIDPcR7XMEGAID+0xa2>
 b02:	08 95       	ret
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
		CurrentID = DRIVE;
		strcpy(XmegaIDStr, "DRIVE");
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
 b04:	e0 e4       	ldi	r30, 0x40	; 64
 b06:	f6 e0       	ldi	r31, 0x06	; 6
 b08:	20 85       	ldd	r18, Z+8	; 0x08
 b0a:	22 23       	and	r18, r18
 b0c:	cc f4       	brge	.+50     	; 0xb40 <_Z11determineIDPcR7XMEGAID+0x72>
 b0e:	e8 cf       	rjmp	.-48     	; 0xae0 <_Z11determineIDPcR7XMEGAID+0x12>
//This function handles determining the ID of the board, and putting
//the identification string in its variable
//Author: Nick M
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
		CurrentID = DRIVE;
 b10:	fb 01       	movw	r30, r22
 b12:	10 82       	st	Z, r1
		strcpy(XmegaIDStr, "DRIVE");
 b14:	26 e0       	ldi	r18, 0x06	; 6
 b16:	e6 e3       	ldi	r30, 0x36	; 54
 b18:	f0 e2       	ldi	r31, 0x20	; 32
 b1a:	dc 01       	movw	r26, r24
 b1c:	01 90       	ld	r0, Z+
 b1e:	0d 92       	st	X+, r0
 b20:	2a 95       	dec	r18
 b22:	e1 f7       	brne	.-8      	; 0xb1c <_Z11determineIDPcR7XMEGAID+0x4e>
 b24:	08 95       	ret
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
		CurrentID = ARM;
 b26:	21 e0       	ldi	r18, 0x01	; 1
 b28:	fb 01       	movw	r30, r22
 b2a:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "ARM");
 b2c:	41 e4       	ldi	r20, 0x41	; 65
 b2e:	52 e5       	ldi	r21, 0x52	; 82
 b30:	6d e4       	ldi	r22, 0x4D	; 77
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	fc 01       	movw	r30, r24
 b36:	40 83       	st	Z, r20
 b38:	51 83       	std	Z+1, r21	; 0x01
 b3a:	62 83       	std	Z+2, r22	; 0x02
 b3c:	73 83       	std	Z+3, r23	; 0x03
 b3e:	08 95       	ret
	}
	else if (CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 b40:	e0 e4       	ldi	r30, 0x40	; 64
 b42:	f6 e0       	ldi	r31, 0x06	; 6
 b44:	20 85       	ldd	r18, Z+8	; 0x08
 b46:	22 23       	and	r18, r18
 b48:	8c f6       	brge	.-94     	; 0xaec <_Z11determineIDPcR7XMEGAID+0x1e>
 b4a:	0c c0       	rjmp	.+24     	; 0xb64 <_Z11determineIDPcR7XMEGAID+0x96>
		CurrentID = RADIO;
 b4c:	22 e0       	ldi	r18, 0x02	; 2
 b4e:	fb 01       	movw	r30, r22
 b50:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "RADIO");
 b52:	26 e0       	ldi	r18, 0x06	; 6
 b54:	ec e3       	ldi	r30, 0x3C	; 60
 b56:	f0 e2       	ldi	r31, 0x20	; 32
 b58:	dc 01       	movw	r26, r24
 b5a:	01 90       	ld	r0, Z+
 b5c:	0d 92       	st	X+, r0
 b5e:	2a 95       	dec	r18
 b60:	e1 f7       	brne	.-8      	; 0xb5a <_Z11determineIDPcR7XMEGAID+0x8c>
 b62:	08 95       	ret
	}
	else if (CHECK_DIP_SW_1() && CHECK_DIP_SW_2()){
 b64:	e0 e4       	ldi	r30, 0x40	; 64
 b66:	f6 e0       	ldi	r31, 0x06	; 6
 b68:	20 85       	ldd	r18, Z+8	; 0x08
 b6a:	22 23       	and	r18, r18
 b6c:	2c f6       	brge	.-118    	; 0xaf8 <_Z11determineIDPcR7XMEGAID+0x2a>
 b6e:	08 95       	ret
		CurrentID = DEBUG_MODE;
 b70:	23 e0       	ldi	r18, 0x03	; 3
 b72:	fb 01       	movw	r30, r22
 b74:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "DEBUG_MODE");
 b76:	2b e0       	ldi	r18, 0x0B	; 11
 b78:	e2 e4       	ldi	r30, 0x42	; 66
 b7a:	f0 e2       	ldi	r31, 0x20	; 32
 b7c:	dc 01       	movw	r26, r24
 b7e:	01 90       	ld	r0, Z+
 b80:	0d 92       	st	X+, r0
 b82:	2a 95       	dec	r18
 b84:	e1 f7       	brne	.-8      	; 0xb7e <_Z11determineIDPcR7XMEGAID+0xb0>
 b86:	08 95       	ret

00000b88 <__tablejump2__>:
 b88:	ee 0f       	add	r30, r30
 b8a:	ff 1f       	adc	r31, r31

00000b8c <__tablejump__>:
 b8c:	05 90       	lpm	r0, Z+
 b8e:	f4 91       	lpm	r31, Z
 b90:	e0 2d       	mov	r30, r0
 b92:	19 94       	eijmp

00000b94 <_exit>:
 b94:	f8 94       	cli

00000b96 <__stop_program>:
 b96:	ff cf       	rjmp	.-2      	; 0xb96 <__stop_program>

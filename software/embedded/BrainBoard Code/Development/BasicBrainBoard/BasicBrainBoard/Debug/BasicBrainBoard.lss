
BasicBrainBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00802000  000008b6  0000094a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00802038  00802038  00000982  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f5a  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000767  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c7f  00000000  00000000  000041d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c8  00000000  00000000  00004e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011f9  00000000  00000000  0000521c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099d  00000000  00000000  00006415  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00006db2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
   2:	00 00       	nop
   4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
   6:	00 00       	nop
   8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
   a:	00 00       	nop
   c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
   e:	00 00       	nop
  10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
  12:	00 00       	nop
  14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
  16:	00 00       	nop
  18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
  1e:	00 00       	nop
  20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
  22:	00 00       	nop
  24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
  26:	00 00       	nop
  28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
  2e:	00 00       	nop
  30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
  32:	00 00       	nop
  34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
  36:	00 00       	nop
  38:	2e c1       	rjmp	.+604    	; 0x296 <__vector_14>
  3a:	00 00       	nop
  3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
  3e:	00 00       	nop
  40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
  42:	00 00       	nop
  44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
  46:	00 00       	nop
  48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
  4e:	00 00       	nop
  50:	0a c1       	rjmp	.+532    	; 0x266 <__vector_20>
  52:	00 00       	nop
  54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
  56:	00 00       	nop
  58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c1       	rjmp	.+608    	; 0x2c6 <__vector_25>
  66:	00 00       	nop
  68:	57 c1       	rjmp	.+686    	; 0x318 <__vector_26>
  6a:	00 00       	nop
  6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
  6e:	00 00       	nop
  70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
  72:	00 00       	nop
  74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
  76:	00 00       	nop
  78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
  82:	00 00       	nop
  84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
  86:	00 00       	nop
  88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
  8e:	00 00       	nop
  90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
  92:	00 00       	nop
  94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
  96:	00 00       	nop
  98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	40 c1       	rjmp	.+640    	; 0x36a <__vector_58>
  ea:	00 00       	nop
  ec:	67 c1       	rjmp	.+718    	; 0x3bc <__vector_59>
  ee:	00 00       	nop
  f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
 102:	00 00       	nop
 104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
 106:	00 00       	nop
 108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
 10e:	00 00       	nop
 110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
 112:	00 00       	nop
 114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
 116:	00 00       	nop
 118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
 11e:	00 00       	nop
 120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
 122:	00 00       	nop
 124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
 126:	00 00       	nop
 128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
 12e:	00 00       	nop
 130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
 132:	00 00       	nop
 134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
 136:	00 00       	nop
 138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
 13e:	00 00       	nop
 140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
 142:	00 00       	nop
 144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
 146:	00 00       	nop
 148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
 14e:	00 00       	nop
 150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
 152:	00 00       	nop
 154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
 156:	00 00       	nop
 158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
 15e:	00 00       	nop
 160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
 162:	00 00       	nop
 164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
 166:	00 00       	nop
 168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
 16e:	00 00       	nop
 170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
 172:	00 00       	nop
 174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
 176:	00 00       	nop
 178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
 17e:	00 00       	nop
 180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
 182:	00 00       	nop
 184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
 186:	00 00       	nop
 188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
 18e:	00 00       	nop
 190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
 192:	00 00       	nop
 194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
 196:	00 00       	nop
 198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
 1fa:	00 00       	nop
 1fc:	7e 03       	fmul	r23, r22
 1fe:	98 03       	fmulsu	r17, r16
 200:	8b 03       	fmulsu	r16, r19
 202:	a5 03       	fmuls	r18, r21
 204:	b2 03       	fmuls	r19, r18
 206:	bf 03       	fmulsu	r19, r23
 208:	cc 03       	fmulsu	r20, r20

0000020a <__ctors_end>:
 20a:	11 24       	eor	r1, r1
 20c:	1f be       	out	0x3f, r1	; 63
 20e:	cf ef       	ldi	r28, 0xFF	; 255
 210:	cd bf       	out	0x3d, r28	; 61
 212:	df e3       	ldi	r29, 0x3F	; 63
 214:	de bf       	out	0x3e, r29	; 62
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
 21a:	10 e2       	ldi	r17, 0x20	; 32
 21c:	a0 e0       	ldi	r26, 0x00	; 0
 21e:	b0 e2       	ldi	r27, 0x20	; 32
 220:	e6 eb       	ldi	r30, 0xB6	; 182
 222:	f8 e0       	ldi	r31, 0x08	; 8
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	0b bf       	out	0x3b, r16	; 59
 228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
 22a:	07 90       	elpm	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	a8 33       	cpi	r26, 0x38	; 56
 230:	b1 07       	cpc	r27, r17
 232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
 234:	20 e2       	ldi	r18, 0x20	; 32
 236:	a8 e3       	ldi	r26, 0x38	; 56
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
 23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
 23e:	a8 35       	cpi	r26, 0x58	; 88
 240:	b2 07       	cpc	r27, r18
 242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
 244:	b3 d1       	rcall	.+870    	; 0x5ac <main>
 246:	35 c3       	rjmp	.+1642   	; 0x8b2 <_exit>

00000248 <__bad_interrupt>:
 248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <_Z11armGPIOInitv>:
#include <avr/io.h>

void armGPIOInit(){
	//Stepper Driver 1
	
	PORTE.DIRSET = (PIN4_bm); //Step Pin
 24a:	e0 e8       	ldi	r30, 0x80	; 128
 24c:	f6 e0       	ldi	r31, 0x06	; 6
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = (PIN7_bm); //Dir Pin
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = (PIN5_bm); //nEN Pin
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	81 83       	std	Z+1, r24	; 0x01
 25a:	08 95       	ret

0000025c <_Z7armInitv>:
	
}


void armInit(){
	MD1_nEN_CLR();
 25c:	80 e2       	ldi	r24, 0x20	; 32
 25e:	e0 e8       	ldi	r30, 0x80	; 128
 260:	f6 e0       	ldi	r31, 0x06	; 6
 262:	86 83       	std	Z+6, r24	; 0x06
 264:	08 95       	ret

00000266 <__vector_20>:

/*
Description: General-Purpose debug function. No designated function, available 
for all who program the board.
*/
void debugMain(){
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	0b b6       	in	r0, 0x3b	; 59
 272:	0f 92       	push	r0
 274:	8f 93       	push	r24
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	e0 e4       	ldi	r30, 0x40	; 64
 27e:	f8 e0       	ldi	r31, 0x08	; 8
 280:	84 87       	std	Z+12, r24	; 0x0c
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0b be       	out	0x3b, r0	; 59
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__vector_14>:
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	0b b6       	in	r0, 0x3b	; 59
 2a2:	0f 92       	push	r0
 2a4:	8f 93       	push	r24
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	e0 e0       	ldi	r30, 0x00	; 0
 2ae:	f8 e0       	ldi	r31, 0x08	; 8
 2b0:	84 87       	std	Z+12, r24	; 0x0c
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0b be       	out	0x3b, r0	; 59
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_25>:
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	0b b6       	in	r0, 0x3b	; 59
 2d2:	0f 92       	push	r0
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
 2ec:	88 e4       	ldi	r24, 0x48	; 72
 2ee:	90 e2       	ldi	r25, 0x20	; 32
 2f0:	cd d1       	rcall	.+922    	; 0x68c <USART_RXComplete>
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0b be       	out	0x3b, r0	; 59
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__vector_26>:
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	0b b6       	in	r0, 0x3b	; 59
 324:	0f 92       	push	r0
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
 33e:	88 e4       	ldi	r24, 0x48	; 72
 340:	90 e2       	ldi	r25, 0x20	; 32
 342:	b9 d1       	rcall	.+882    	; 0x6b6 <USART_DataRegEmpty>
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	bf 91       	pop	r27
 34a:	af 91       	pop	r26
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	7f 91       	pop	r23
 352:	6f 91       	pop	r22
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0b be       	out	0x3b, r0	; 59
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_58>:
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	0b b6       	in	r0, 0x3b	; 59
 376:	0f 92       	push	r0
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	89 e3       	ldi	r24, 0x39	; 57
 392:	90 e2       	ldi	r25, 0x20	; 32
 394:	7b d1       	rcall	.+758    	; 0x68c <USART_RXComplete>
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0b be       	out	0x3b, r0	; 59
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_59>:
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	0b b6       	in	r0, 0x3b	; 59
 3c8:	0f 92       	push	r0
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
 3e2:	89 e3       	ldi	r24, 0x39	; 57
 3e4:	90 e2       	ldi	r25, 0x20	; 32
 3e6:	67 d1       	rcall	.+718    	; 0x6b6 <USART_DataRegEmpty>
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0b be       	out	0x3b, r0	; 59
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <_Z15SendStringSABERPc>:
 40e:	fc 01       	movw	r30, r24
 410:	20 81       	ld	r18, Z
 412:	22 23       	and	r18, r18
 414:	59 f0       	breq	.+22     	; 0x42c <_Z15SendStringSABERPc+0x1e>
 416:	dc 01       	movw	r26, r24
 418:	11 96       	adiw	r26, 0x01	; 1
 41a:	e0 ea       	ldi	r30, 0xA0	; 160
 41c:	fa e0       	ldi	r31, 0x0A	; 10
 41e:	81 81       	ldd	r24, Z+1	; 0x01
 420:	85 ff       	sbrs	r24, 5
 422:	fd cf       	rjmp	.-6      	; 0x41e <_Z15SendStringSABERPc+0x10>
 424:	20 83       	st	Z, r18
 426:	2d 91       	ld	r18, X+
 428:	21 11       	cpse	r18, r1
 42a:	f9 cf       	rjmp	.-14     	; 0x41e <_Z15SendStringSABERPc+0x10>
 42c:	08 95       	ret

0000042e <_Z7armMainv>:
 42e:	0d df       	rcall	.-486    	; 0x24a <_Z11armGPIOInitv>
 430:	15 df       	rcall	.-470    	; 0x25c <_Z7armInitv>
 432:	e0 e8       	ldi	r30, 0x80	; 128
 434:	f6 e0       	ldi	r31, 0x06	; 6
 436:	80 e8       	ldi	r24, 0x80	; 128
 438:	85 83       	std	Z+5, r24	; 0x05
 43a:	80 e1       	ldi	r24, 0x10	; 16
 43c:	86 83       	std	Z+6, r24	; 0x06
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	39 ef       	ldi	r19, 0xF9	; 249
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	21 50       	subi	r18, 0x01	; 1
 446:	30 40       	sbci	r19, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <_Z7armMainv+0x16>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <_Z7armMainv+0x20>
 44e:	00 00       	nop
 450:	85 83       	std	Z+5, r24	; 0x05
 452:	25 ed       	ldi	r18, 0xD5	; 213
 454:	2a 95       	dec	r18
 456:	f1 f7       	brne	.-4      	; 0x454 <_Z7armMainv+0x26>
 458:	00 00       	nop
 45a:	86 83       	std	Z+6, r24	; 0x06
 45c:	f0 cf       	rjmp	.-32     	; 0x43e <_Z7armMainv+0x10>

0000045e <_Z10Saber_initv>:
	
}

void Saber_init(){
	PORTE.DIRSET = PIN3_bm;																			//Sets TX Pin as output
 45e:	e0 e8       	ldi	r30, 0x80	; 128
 460:	f6 e0       	ldi	r31, 0x06	; 6
 462:	88 e0       	ldi	r24, 0x08	; 8
 464:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN2_bm;																			//Sets RX pin as input
 466:	84 e0       	ldi	r24, 0x04	; 4
 468:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&SABER_UNO, &USARTE0, USART_DREINTLVL_LO_gc);				//Initialize USARTE0 as interrupt driven serial and clear it's buffers
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	60 ea       	ldi	r22, 0xA0	; 160
 46e:	7a e0       	ldi	r23, 0x0A	; 10
 470:	89 e3       	ldi	r24, 0x39	; 57
 472:	90 e2       	ldi	r25, 0x20	; 32
 474:	ee d0       	rcall	.+476    	; 0x652 <USART_InterruptDriver_Initialize>
	USART_Format_Set(SABER_UNO.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
 476:	e0 91 39 20 	lds	r30, 0x2039
 47a:	f0 91 3a 20 	lds	r31, 0x203A
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(SABER_UNO.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
 482:	83 81       	ldd	r24, Z+3	; 0x03
 484:	8f 7c       	andi	r24, 0xCF	; 207
 486:	80 61       	ori	r24, 0x10	; 16
 488:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTE0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
 48a:	a0 ea       	ldi	r26, 0xA0	; 160
 48c:	ba e0       	ldi	r27, 0x0A	; 10
 48e:	8f ec       	ldi	r24, 0xCF	; 207
 490:	16 96       	adiw	r26, 0x06	; 6
 492:	8c 93       	st	X, r24
 494:	16 97       	sbiw	r26, 0x06	; 6
 496:	17 96       	adiw	r26, 0x07	; 7
 498:	1c 92       	st	X, r1
	USART_Rx_Enable(SABER_UNO.usart);															//Enable receiving over serial
 49a:	84 81       	ldd	r24, Z+4	; 0x04
 49c:	80 61       	ori	r24, 0x10	; 16
 49e:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(SABER_UNO.usart);															//Enable transmitting over serial
 4a0:	84 81       	ldd	r24, Z+4	; 0x04
 4a2:	88 60       	ori	r24, 0x08	; 8
 4a4:	84 83       	std	Z+4, r24	; 0x04
 4a6:	08 95       	ret

000004a8 <_Z9uart_initv>:
}


//Inits the UART for the board
void uart_init(void){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
 4a8:	e0 e4       	ldi	r30, 0x40	; 64
 4aa:	f6 e0       	ldi	r31, 0x06	; 6
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
 4b0:	84 e0       	ldi	r24, 0x04	; 4
 4b2:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	60 ea       	ldi	r22, 0xA0	; 160
 4b8:	78 e0       	ldi	r23, 0x08	; 8
 4ba:	88 e4       	ldi	r24, 0x48	; 72
 4bc:	90 e2       	ldi	r25, 0x20	; 32
 4be:	c9 d0       	rcall	.+402    	; 0x652 <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
 4c0:	e0 91 48 20 	lds	r30, 0x2048
 4c4:	f0 91 49 20 	lds	r31, 0x2049
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
 4cc:	83 81       	ldd	r24, Z+3	; 0x03
 4ce:	8f 7c       	andi	r24, 0xCF	; 207
 4d0:	80 61       	ori	r24, 0x10	; 16
 4d2:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
 4d4:	a0 ea       	ldi	r26, 0xA0	; 160
 4d6:	b8 e0       	ldi	r27, 0x08	; 8
 4d8:	8f ec       	ldi	r24, 0xCF	; 207
 4da:	16 96       	adiw	r26, 0x06	; 6
 4dc:	8c 93       	st	X, r24
 4de:	16 97       	sbiw	r26, 0x06	; 6
 4e0:	17 96       	adiw	r26, 0x07	; 7
 4e2:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
 4e4:	84 81       	ldd	r24, Z+4	; 0x04
 4e6:	80 61       	ori	r24, 0x10	; 16
 4e8:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
 4ea:	84 81       	ldd	r24, Z+4	; 0x04
 4ec:	88 60       	ori	r24, 0x08	; 8
 4ee:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
 4f0:	e0 ea       	ldi	r30, 0xA0	; 160
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	82 81       	ldd	r24, Z+2	; 0x02
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	82 83       	std	Z+2, r24	; 0x02
 4fa:	08 95       	ret

000004fc <_Z10timer_initv>:
}

//Initializes timers
void timer_init(void){
	TCC0.PER = 100;	//period for PWM
 4fc:	e0 e0       	ldi	r30, 0x00	; 0
 4fe:	f8 e0       	ldi	r31, 0x08	; 8
 500:	24 e6       	ldi	r18, 0x64	; 100
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	26 a3       	std	Z+38, r18	; 0x26
 506:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc; //sets the PWM base frequency by 2000000/256
 508:	66 e0       	ldi	r22, 0x06	; 6
 50a:	60 83       	st	Z, r22
	TCC0.CTRLB = TC_WGMODE_SINGLESLOPE_gc; //sets the wave generation mode to single slope
 50c:	53 e0       	ldi	r21, 0x03	; 3
 50e:	51 83       	std	Z+1, r21	; 0x01
	TCC0.CTRLB |= (0b00110000); //output pins on red and blue LED
 510:	81 81       	ldd	r24, Z+1	; 0x01
 512:	80 63       	ori	r24, 0x30	; 48
 514:	81 83       	std	Z+1, r24	; 0x01
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; //interrupt register
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	46 83       	std	Z+6, r20	; 0x06
	TCC0.CCB = 10; 
 51a:	8a e0       	ldi	r24, 0x0A	; 10
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	82 a7       	std	Z+42, r24	; 0x2a
 520:	93 a7       	std	Z+43, r25	; 0x2b
	TCC0.CCA = 50; 
 522:	82 e3       	ldi	r24, 0x32	; 50
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	80 a7       	std	Z+40, r24	; 0x28
 528:	91 a7       	std	Z+41, r25	; 0x29
	
	TCC1.PER = 100;
 52a:	e0 e4       	ldi	r30, 0x40	; 64
 52c:	f8 e0       	ldi	r31, 0x08	; 8
 52e:	26 a3       	std	Z+38, r18	; 0x26
 530:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA = TC_CLKSEL_DIV256_gc;
 532:	60 83       	st	Z, r22
	TCC1.CTRLB = TC_WGMODE_SINGLESLOPE_gc;
 534:	51 83       	std	Z+1, r21	; 0x01
	TCC1.CTRLB |= (0b00010000); //output pins on green LED
 536:	21 81       	ldd	r18, Z+1	; 0x01
 538:	20 61       	ori	r18, 0x10	; 16
 53a:	21 83       	std	Z+1, r18	; 0x01
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
 53c:	46 83       	std	Z+6, r20	; 0x06
	TCC1.CCA = 50;
 53e:	80 a7       	std	Z+40, r24	; 0x28
 540:	91 a7       	std	Z+41, r25	; 0x29
 542:	08 95       	ret

00000544 <_Z12SendStringPCPc>:
}

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 544:	fc 01       	movw	r30, r24
 546:	20 81       	ld	r18, Z
 548:	22 23       	and	r18, r18
 54a:	59 f0       	breq	.+22     	; 0x562 <_Z12SendStringPCPc+0x1e>
 54c:	dc 01       	movw	r26, r24
 54e:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
 550:	e0 ea       	ldi	r30, 0xA0	; 160
 552:	f8 e0       	ldi	r31, 0x08	; 8
 554:	81 81       	ldd	r24, Z+1	; 0x01
 556:	85 ff       	sbrs	r24, 5
 558:	fd cf       	rjmp	.-6      	; 0x554 <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);
 55a:	20 83       	st	Z, r18
	TCC1.CCA = 50;
}

//Sends a string to the computer
void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 55c:	2d 91       	ld	r18, X+
 55e:	21 11       	cpse	r18, r1
 560:	f9 cf       	rjmp	.-14     	; 0x554 <_Z12SendStringPCPc+0x10>
 562:	08 95       	ret

00000564 <_Z9driveMainv>:
This function exists inside a while(1) so it will loop itself forever

*/
void driveMain(){
	int check = 0;
	Saber_init();
 564:	7c df       	rcall	.-264    	; 0x45e <_Z10Saber_initv>
	char cmmd[5] = {'D', ',' , 's'};
	SendStringSABER("D,start\n");
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e2       	ldi	r25, 0x20	; 32
 56a:	51 df       	rcall	.-350    	; 0x40e <_Z15SendStringSABERPc>
			_delay_ms(500);
		}
	}
	*/
while(1){
	SendStringSABER("D,s200\n");
 56c:	89 e0       	ldi	r24, 0x09	; 9
 56e:	90 e2       	ldi	r25, 0x20	; 32
 570:	4e df       	rcall	.-356    	; 0x40e <_Z15SendStringSABERPc>
	SendStringPC("Sent to saber\n");
 572:	81 e1       	ldi	r24, 0x11	; 17
 574:	90 e2       	ldi	r25, 0x20	; 32
 576:	e6 df       	rcall	.-52     	; 0x544 <_Z12SendStringPCPc>
 578:	f9 cf       	rjmp	.-14     	; 0x56c <_Z9driveMainv+0x8>

0000057a <_Z23SetXMEGA32MhzCalibratedv>:
	}
}

//Configures the XMEGA to run on it's 32Mhz internal? oscillator
void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 57a:	88 ed       	ldi	r24, 0xD8	; 216
 57c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
 584:	e0 e5       	ldi	r30, 0x50	; 80
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	81 81       	ldd	r24, Z+1	; 0x01
 58a:	81 ff       	sbrs	r24, 1
 58c:	fd cf       	rjmp	.-6      	; 0x588 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
 58e:	88 ed       	ldi	r24, 0xD8	; 216
 590:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 598:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
 59a:	e0 e5       	ldi	r30, 0x50	; 80
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	84 60       	ori	r24, 0x04	; 4
 5a2:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
 5a4:	81 81       	ldd	r24, Z+1	; 0x01
 5a6:	82 ff       	sbrs	r24, 2
 5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	/*
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator 
	*/
}
 5aa:	08 95       	ret

000005ac <main>:
			- Launch the 'main' function associated with the board
				-INFINITE LOOP

*/
int main(void)
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	2c 97       	sbiw	r28, 0x0c	; 12
 5b6:	cd bf       	out	0x3d, r28	; 61
 5b8:	de bf       	out	0x3e, r29	; 62
	SetXMEGA32MhzCalibrated();
 5ba:	df df       	rcall	.-66     	; 0x57a <_Z23SetXMEGA32MhzCalibratedv>
	//Main's Variable Declarations
	char XmegaIDStr[11];
	XMEGAID CurrentID;
		
	//Initialization Code
	uart_init();
 5bc:	75 df       	rcall	.-278    	; 0x4a8 <_Z9uart_initv>
	initializeIO();
 5be:	0a d1       	rcall	.+532    	; 0x7d4 <_Z12initializeIOv>
	determineID(XmegaIDStr, CurrentID);
 5c0:	be 01       	movw	r22, r28
 5c2:	64 5f       	subi	r22, 0xF4	; 244
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	ce 01       	movw	r24, r28
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	10 d1       	rcall	.+544    	; 0x7ec <_Z11determineIDPcR7XMEGAID>
	timer_init();  //Initialize Timers
 5cc:	97 df       	rcall	.-210    	; 0x4fc <_Z10timer_initv>
	sei(); //Enable interrupts
 5ce:	78 94       	sei
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm; //draws current for ?
 5d0:	e0 ea       	ldi	r30, 0xA0	; 160
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	82 81       	ldd	r24, Z+2	; 0x02
 5d6:	81 60       	ori	r24, 0x01	; 1
 5d8:	82 83       	std	Z+2, r24	; 0x02
				RGBSetColor(YELLOW);
				char recieveChar;
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
					if (recieveChar == 'r'){
						CurrentState = MainProgram;
 5da:	02 e0       	ldi	r16, 0x02	; 2
				RGBSetColor(RED);
				if(USART_RXBufferData_Available(&USART_PC_Data)){
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
					if (recieveChar == 'p'){
						SendStringPC(XmegaIDStr); //Identify itself
						CurrentState = WaitForReady;
 5dc:	11 e0       	ldi	r17, 0x01	; 1

	
    while(1)
    { 
		
		switch (CurrentState){
 5de:	90 91 57 20 	lds	r25, 0x2057
 5e2:	91 30       	cpi	r25, 0x01	; 1
 5e4:	c1 f0       	breq	.+48     	; 0x616 <main+0x6a>
 5e6:	18 f0       	brcs	.+6      	; 0x5ee <main+0x42>
 5e8:	92 30       	cpi	r25, 0x02	; 2
 5ea:	21 f1       	breq	.+72     	; 0x634 <main+0x88>
 5ec:	fa cf       	rjmp	.-12     	; 0x5e2 <main+0x36>
			case WaitForPing:
				RGBSetColor(RED);
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	7c d0       	rcall	.+248    	; 0x6ea <_Z11RGBSetColor9RGBColors>
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 5f2:	88 e4       	ldi	r24, 0x48	; 72
 5f4:	90 e2       	ldi	r25, 0x20	; 32
 5f6:	36 d0       	rcall	.+108    	; 0x664 <USART_RXBufferData_Available>
 5f8:	88 23       	and	r24, r24
 5fa:	89 f3       	breq	.-30     	; 0x5de <main+0x32>
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
 5fc:	88 e4       	ldi	r24, 0x48	; 72
 5fe:	90 e2       	ldi	r25, 0x20	; 32
 600:	39 d0       	rcall	.+114    	; 0x674 <USART_RXBuffer_GetByte>
 602:	80 93 38 20 	sts	0x2038, r24
					if (recieveChar == 'p'){
 606:	80 37       	cpi	r24, 0x70	; 112
 608:	51 f7       	brne	.-44     	; 0x5de <main+0x32>
						SendStringPC(XmegaIDStr); //Identify itself
 60a:	ce 01       	movw	r24, r28
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	9a df       	rcall	.-204    	; 0x544 <_Z12SendStringPCPc>
						CurrentState = WaitForReady;
 610:	10 93 57 20 	sts	0x2057, r17
 614:	e4 cf       	rjmp	.-56     	; 0x5de <main+0x32>
					}
					//else, do nothing and wait for more chars
				}
				break;
			case WaitForReady:
				RGBSetColor(YELLOW);
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	68 d0       	rcall	.+208    	; 0x6ea <_Z11RGBSetColor9RGBColors>
				char recieveChar;
				if(USART_RXBufferData_Available(&USART_PC_Data)){
 61a:	88 e4       	ldi	r24, 0x48	; 72
 61c:	90 e2       	ldi	r25, 0x20	; 32
 61e:	22 d0       	rcall	.+68     	; 0x664 <USART_RXBufferData_Available>
 620:	88 23       	and	r24, r24
 622:	e9 f2       	breq	.-70     	; 0x5de <main+0x32>
					recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);  //Read character off of buffer
 624:	88 e4       	ldi	r24, 0x48	; 72
 626:	90 e2       	ldi	r25, 0x20	; 32
 628:	25 d0       	rcall	.+74     	; 0x674 <USART_RXBuffer_GetByte>
					if (recieveChar == 'r'){
 62a:	82 37       	cpi	r24, 0x72	; 114
 62c:	c1 f6       	brne	.-80     	; 0x5de <main+0x32>
						CurrentState = MainProgram;
 62e:	00 93 57 20 	sts	0x2057, r16
 632:	d5 cf       	rjmp	.-86     	; 0x5de <main+0x32>
					}
					//else, do nothing and wait for more chars
				}
				break;
			case MainProgram:
				RGBSetColor(GREEN);
 634:	81 2f       	mov	r24, r17
 636:	59 d0       	rcall	.+178    	; 0x6ea <_Z11RGBSetColor9RGBColors>
				switch (CurrentID) {
 638:	9c 85       	ldd	r25, Y+12	; 0x0c
 63a:	91 30       	cpi	r25, 0x01	; 1
 63c:	39 f0       	breq	.+14     	; 0x64c <main+0xa0>
 63e:	28 f0       	brcs	.+10     	; 0x64a <main+0x9e>
 640:	92 30       	cpi	r25, 0x02	; 2
 642:	29 f0       	breq	.+10     	; 0x64e <main+0xa2>
 644:	93 30       	cpi	r25, 0x03	; 3
 646:	21 f0       	breq	.+8      	; 0x650 <main+0xa4>
 648:	ca cf       	rjmp	.-108    	; 0x5de <main+0x32>
					case DRIVE:
						while (1) {
							driveMain();
 64a:	8c df       	rcall	.-232    	; 0x564 <_Z9driveMainv>
						}
						break;
					case ARM:
						while (1) {
							armMain();
 64c:	f0 de       	rcall	.-544    	; 0x42e <_Z7armMainv>
 64e:	ff cf       	rjmp	.-2      	; 0x64e <main+0xa2>
 650:	ff cf       	rjmp	.-2      	; 0x650 <main+0xa4>

00000652 <USART_InterruptDriver_Initialize>:
		tempCTRLA = usart_data->usart->CTRLA;
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
		usart_data->usart->CTRLA = tempCTRLA;
	}
	return TXBuffer_FreeSpace;
}
 652:	fc 01       	movw	r30, r24
 654:	60 83       	st	Z, r22
 656:	71 83       	std	Z+1, r23	; 0x01
 658:	42 83       	std	Z+2, r20	; 0x02
 65a:	14 86       	std	Z+12, r1	; 0x0c
 65c:	13 86       	std	Z+11, r1	; 0x0b
 65e:	16 86       	std	Z+14, r1	; 0x0e
 660:	15 86       	std	Z+13, r1	; 0x0d
 662:	08 95       	ret

00000664 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 664:	fc 01       	movw	r30, r24
 666:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 668:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	29 13       	cpse	r18, r25
 66e:	01 c0       	rjmp	.+2      	; 0x672 <USART_RXBufferData_Available+0xe>
 670:	80 e0       	ldi	r24, 0x00	; 0
}
 672:	08 95       	ret

00000674 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 674:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 676:	84 85       	ldd	r24, Z+12	; 0x0c
 678:	df 01       	movw	r26, r30
 67a:	a8 0f       	add	r26, r24
 67c:	b1 1d       	adc	r27, r1
 67e:	13 96       	adiw	r26, 0x03	; 3
 680:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 682:	94 85       	ldd	r25, Z+12	; 0x0c
 684:	9f 5f       	subi	r25, 0xFF	; 255
 686:	93 70       	andi	r25, 0x03	; 3
 688:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 68a:	08 95       	ret

0000068c <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 68c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 68e:	83 85       	ldd	r24, Z+11	; 0x0b
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 694:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 696:	a0 81       	ld	r26, Z
 698:	b1 81       	ldd	r27, Z+1	; 0x01
 69a:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 69c:	89 17       	cp	r24, r25
 69e:	49 f0       	breq	.+18     	; 0x6b2 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 6a0:	93 85       	ldd	r25, Z+11	; 0x0b
 6a2:	df 01       	movw	r26, r30
 6a4:	a9 0f       	add	r26, r25
 6a6:	b1 1d       	adc	r27, r1
 6a8:	13 96       	adiw	r26, 0x03	; 3
 6aa:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 6ac:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 6b4:	08 95       	ret

000006b6 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 6b6:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 6b8:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 6ba:	95 85       	ldd	r25, Z+13	; 0x0d
 6bc:	98 13       	cpse	r25, r24
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 6c0:	01 90       	ld	r0, Z+
 6c2:	f0 81       	ld	r31, Z
 6c4:	e0 2d       	mov	r30, r0
 6c6:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 6c8:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 6ca:	83 83       	std	Z+3, r24	; 0x03
 6cc:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 6ce:	86 85       	ldd	r24, Z+14	; 0x0e
 6d0:	df 01       	movw	r26, r30
 6d2:	a8 0f       	add	r26, r24
 6d4:	b1 1d       	adc	r27, r1
 6d6:	17 96       	adiw	r26, 0x07	; 7
 6d8:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 6da:	a0 81       	ld	r26, Z
 6dc:	b1 81       	ldd	r27, Z+1	; 0x01
 6de:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 6e0:	86 85       	ldd	r24, Z+14	; 0x0e
 6e2:	8f 5f       	subi	r24, 0xFF	; 255
 6e4:	83 70       	andi	r24, 0x03	; 3
 6e6:	86 87       	std	Z+14, r24	; 0x0e
 6e8:	08 95       	ret

000006ea <_Z11RGBSetColor9RGBColors>:
#include <avr/io.h>

//This function handles making colors on the RGB LED
//Author: Nick McComb
void RGBSetColor(RGBColors choice){
	switch(choice){
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	87 30       	cpi	r24, 0x07	; 7
 6ee:	91 05       	cpc	r25, r1
 6f0:	08 f0       	brcs	.+2      	; 0x6f4 <_Z11RGBSetColor9RGBColors+0xa>
 6f2:	63 c0       	rjmp	.+198    	; 0x7ba <_Z11RGBSetColor9RGBColors+0xd0>
 6f4:	fc 01       	movw	r30, r24
 6f6:	e2 50       	subi	r30, 0x02	; 2
 6f8:	ff 4f       	sbci	r31, 0xFF	; 255
 6fa:	d5 c0       	rjmp	.+426    	; 0x8a6 <__tablejump2__>
		case RED:
			TCC0.CCA = 0;
 6fc:	e0 e0       	ldi	r30, 0x00	; 0
 6fe:	f8 e0       	ldi	r31, 0x08	; 8
 700:	10 a6       	std	Z+40, r1	; 0x28
 702:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = COLOR_ON;
 704:	82 e3       	ldi	r24, 0x32	; 50
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	82 a7       	std	Z+42, r24	; 0x2a
 70a:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = 0;
 70c:	e0 e4       	ldi	r30, 0x40	; 64
 70e:	f8 e0       	ldi	r31, 0x08	; 8
 710:	10 a6       	std	Z+40, r1	; 0x28
 712:	11 a6       	std	Z+41, r1	; 0x29
			break;
 714:	08 95       	ret
		case BLUE:
			TCC0.CCA = COLOR_ON;
 716:	e0 e0       	ldi	r30, 0x00	; 0
 718:	f8 e0       	ldi	r31, 0x08	; 8
 71a:	82 e3       	ldi	r24, 0x32	; 50
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	80 a7       	std	Z+40, r24	; 0x28
 720:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = 0;
 722:	12 a6       	std	Z+42, r1	; 0x2a
 724:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = 0;
 726:	e0 e4       	ldi	r30, 0x40	; 64
 728:	f8 e0       	ldi	r31, 0x08	; 8
 72a:	10 a6       	std	Z+40, r1	; 0x28
 72c:	11 a6       	std	Z+41, r1	; 0x29
			break;
 72e:	08 95       	ret
		case GREEN:
			TCC0.CCA = 0;
 730:	e0 e0       	ldi	r30, 0x00	; 0
 732:	f8 e0       	ldi	r31, 0x08	; 8
 734:	10 a6       	std	Z+40, r1	; 0x28
 736:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = 0;
 738:	12 a6       	std	Z+42, r1	; 0x2a
 73a:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = COLOR_ON;
 73c:	82 e3       	ldi	r24, 0x32	; 50
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	e0 e4       	ldi	r30, 0x40	; 64
 742:	f8 e0       	ldi	r31, 0x08	; 8
 744:	80 a7       	std	Z+40, r24	; 0x28
 746:	91 a7       	std	Z+41, r25	; 0x29
			break;
 748:	08 95       	ret
		case PURPLE:
			TCC0.CCA = COLOR_ON;
 74a:	e0 e0       	ldi	r30, 0x00	; 0
 74c:	f8 e0       	ldi	r31, 0x08	; 8
 74e:	82 e3       	ldi	r24, 0x32	; 50
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	80 a7       	std	Z+40, r24	; 0x28
 754:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = COLOR_ON;
 756:	82 a7       	std	Z+42, r24	; 0x2a
 758:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = 0;
 75a:	e0 e4       	ldi	r30, 0x40	; 64
 75c:	f8 e0       	ldi	r31, 0x08	; 8
 75e:	10 a6       	std	Z+40, r1	; 0x28
 760:	11 a6       	std	Z+41, r1	; 0x29
			break;
 762:	08 95       	ret
		case YELLOW:
			TCC0.CCA = 0;
 764:	e0 e0       	ldi	r30, 0x00	; 0
 766:	f8 e0       	ldi	r31, 0x08	; 8
 768:	10 a6       	std	Z+40, r1	; 0x28
 76a:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = COLOR_ON;
 76c:	82 e3       	ldi	r24, 0x32	; 50
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	82 a7       	std	Z+42, r24	; 0x2a
 772:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON;
 774:	e0 e4       	ldi	r30, 0x40	; 64
 776:	f8 e0       	ldi	r31, 0x08	; 8
 778:	80 a7       	std	Z+40, r24	; 0x28
 77a:	91 a7       	std	Z+41, r25	; 0x29
			break;
 77c:	08 95       	ret
		case WHITE:
			TCC0.CCA = COLOR_ON;
 77e:	e0 e0       	ldi	r30, 0x00	; 0
 780:	f8 e0       	ldi	r31, 0x08	; 8
 782:	82 e3       	ldi	r24, 0x32	; 50
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	80 a7       	std	Z+40, r24	; 0x28
 788:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = COLOR_ON;
 78a:	82 a7       	std	Z+42, r24	; 0x2a
 78c:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON;
 78e:	e0 e4       	ldi	r30, 0x40	; 64
 790:	f8 e0       	ldi	r31, 0x08	; 8
 792:	80 a7       	std	Z+40, r24	; 0x28
 794:	91 a7       	std	Z+41, r25	; 0x29
			break;
 796:	08 95       	ret
		case ORANGE:
			TCC0.CCB = COLOR_ON;      //Red
 798:	e0 e0       	ldi	r30, 0x00	; 0
 79a:	f8 e0       	ldi	r31, 0x08	; 8
 79c:	82 e3       	ldi	r24, 0x32	; 50
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	82 a7       	std	Z+42, r24	; 0x2a
 7a2:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON / 2;  //Green
 7a4:	89 e1       	ldi	r24, 0x19	; 25
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	a0 e4       	ldi	r26, 0x40	; 64
 7aa:	b8 e0       	ldi	r27, 0x08	; 8
 7ac:	98 96       	adiw	r26, 0x28	; 40
 7ae:	8d 93       	st	X+, r24
 7b0:	9c 93       	st	X, r25
 7b2:	99 97       	sbiw	r26, 0x29	; 41
			TCC0.CCA = 0;             //Blue
 7b4:	10 a6       	std	Z+40, r1	; 0x28
 7b6:	11 a6       	std	Z+41, r1	; 0x29
			break;
 7b8:	08 95       	ret
		case OFF:
		default:
			TCC0.CCB = 0;  //Red
 7ba:	e0 e0       	ldi	r30, 0x00	; 0
 7bc:	f8 e0       	ldi	r31, 0x08	; 8
 7be:	12 a6       	std	Z+42, r1	; 0x2a
 7c0:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = 0;  //Green
 7c2:	a0 e4       	ldi	r26, 0x40	; 64
 7c4:	b8 e0       	ldi	r27, 0x08	; 8
 7c6:	98 96       	adiw	r26, 0x28	; 40
 7c8:	1d 92       	st	X+, r1
 7ca:	1c 92       	st	X, r1
 7cc:	99 97       	sbiw	r26, 0x29	; 41
			TCC0.CCA = 0;  //Blue
 7ce:	10 a6       	std	Z+40, r1	; 0x28
 7d0:	11 a6       	std	Z+41, r1	; 0x29
 7d2:	08 95       	ret

000007d4 <_Z12initializeIOv>:


//Initializes all I/O for the board
//Sets up DIR, and PULLUP/PULLDOWN Resistors, etc.
void initializeIO(){
	PORTC.DIRSET = (PIN5_bm); //Sets output LED (status/error)
 7d4:	e0 e4       	ldi	r30, 0x40	; 64
 7d6:	f6 e0       	ldi	r31, 0x06	; 6
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = (PIN0_bm | PIN1_bm | PIN4_bm); //Set RGB Led outputs
 7dc:	83 e1       	ldi	r24, 0x13	; 19
 7de:	81 83       	std	Z+1, r24	; 0x01
	
	PORTC.DIRCLR = (PIN6_bm | PIN7_bm); //Sets DIP Switch Input
 7e0:	80 ec       	ldi	r24, 0xC0	; 192
 7e2:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
 7e4:	88 e1       	ldi	r24, 0x18	; 24
 7e6:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
 7e8:	87 8b       	std	Z+23, r24	; 0x17
 7ea:	08 95       	ret

000007ec <_Z11determineIDPcR7XMEGAID>:

//This function handles determining the ID of the board, and putting
//the identification string in its variable
//Author: Nick M
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 7ec:	e0 e4       	ldi	r30, 0x40	; 64
 7ee:	f6 e0       	ldi	r31, 0x06	; 6
 7f0:	20 85       	ldd	r18, Z+8	; 0x08
 7f2:	22 23       	and	r18, r18
 7f4:	b4 f4       	brge	.+44     	; 0x822 <_Z11determineIDPcR7XMEGAID+0x36>
 7f6:	20 85       	ldd	r18, Z+8	; 0x08
 7f8:	26 fd       	sbrc	r18, 6
 7fa:	19 c0       	rjmp	.+50     	; 0x82e <_Z11determineIDPcR7XMEGAID+0x42>
 7fc:	12 c0       	rjmp	.+36     	; 0x822 <_Z11determineIDPcR7XMEGAID+0x36>
		CurrentID = DRIVE;
		strcpy(XmegaIDStr, "DRIVE");
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
 7fe:	e0 e4       	ldi	r30, 0x40	; 64
 800:	f6 e0       	ldi	r31, 0x06	; 6
 802:	20 85       	ldd	r18, Z+8	; 0x08
 804:	26 ff       	sbrs	r18, 6
 806:	1e c0       	rjmp	.+60     	; 0x844 <_Z11determineIDPcR7XMEGAID+0x58>
 808:	2a c0       	rjmp	.+84     	; 0x85e <_Z11determineIDPcR7XMEGAID+0x72>
		CurrentID = ARM;
		strcpy(XmegaIDStr, "ARM");
	}
	else if (CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 80a:	e0 e4       	ldi	r30, 0x40	; 64
 80c:	f6 e0       	ldi	r31, 0x06	; 6
 80e:	20 85       	ldd	r18, Z+8	; 0x08
 810:	26 fd       	sbrc	r18, 6
 812:	2b c0       	rjmp	.+86     	; 0x86a <_Z11determineIDPcR7XMEGAID+0x7e>
 814:	36 c0       	rjmp	.+108    	; 0x882 <_Z11determineIDPcR7XMEGAID+0x96>
		CurrentID = RADIO;
		strcpy(XmegaIDStr, "RADIO");
	}
	else if (CHECK_DIP_SW_1() && CHECK_DIP_SW_2()){
 816:	e0 e4       	ldi	r30, 0x40	; 64
 818:	f6 e0       	ldi	r31, 0x06	; 6
 81a:	20 85       	ldd	r18, Z+8	; 0x08
 81c:	26 ff       	sbrs	r18, 6
 81e:	37 c0       	rjmp	.+110    	; 0x88e <_Z11determineIDPcR7XMEGAID+0xa2>
 820:	08 95       	ret
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
		CurrentID = DRIVE;
		strcpy(XmegaIDStr, "DRIVE");
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
 822:	e0 e4       	ldi	r30, 0x40	; 64
 824:	f6 e0       	ldi	r31, 0x06	; 6
 826:	20 85       	ldd	r18, Z+8	; 0x08
 828:	22 23       	and	r18, r18
 82a:	cc f4       	brge	.+50     	; 0x85e <_Z11determineIDPcR7XMEGAID+0x72>
 82c:	e8 cf       	rjmp	.-48     	; 0x7fe <_Z11determineIDPcR7XMEGAID+0x12>
//This function handles determining the ID of the board, and putting
//the identification string in its variable
//Author: Nick M
void determineID(char * XmegaIDStr, XMEGAID & CurrentID){
	if      (!CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
		CurrentID = DRIVE;
 82e:	fb 01       	movw	r30, r22
 830:	10 82       	st	Z, r1
		strcpy(XmegaIDStr, "DRIVE");
 832:	26 e0       	ldi	r18, 0x06	; 6
 834:	e0 e2       	ldi	r30, 0x20	; 32
 836:	f0 e2       	ldi	r31, 0x20	; 32
 838:	dc 01       	movw	r26, r24
 83a:	01 90       	ld	r0, Z+
 83c:	0d 92       	st	X+, r0
 83e:	2a 95       	dec	r18
 840:	e1 f7       	brne	.-8      	; 0x83a <_Z11determineIDPcR7XMEGAID+0x4e>
 842:	08 95       	ret
	}
	else if (!CHECK_DIP_SW_1() && CHECK_DIP_SW_2()) {
		CurrentID = ARM;
 844:	21 e0       	ldi	r18, 0x01	; 1
 846:	fb 01       	movw	r30, r22
 848:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "ARM");
 84a:	41 e4       	ldi	r20, 0x41	; 65
 84c:	52 e5       	ldi	r21, 0x52	; 82
 84e:	6d e4       	ldi	r22, 0x4D	; 77
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	fc 01       	movw	r30, r24
 854:	40 83       	st	Z, r20
 856:	51 83       	std	Z+1, r21	; 0x01
 858:	62 83       	std	Z+2, r22	; 0x02
 85a:	73 83       	std	Z+3, r23	; 0x03
 85c:	08 95       	ret
	}
	else if (CHECK_DIP_SW_1() && !CHECK_DIP_SW_2()){
 85e:	e0 e4       	ldi	r30, 0x40	; 64
 860:	f6 e0       	ldi	r31, 0x06	; 6
 862:	20 85       	ldd	r18, Z+8	; 0x08
 864:	22 23       	and	r18, r18
 866:	8c f6       	brge	.-94     	; 0x80a <_Z11determineIDPcR7XMEGAID+0x1e>
 868:	0c c0       	rjmp	.+24     	; 0x882 <_Z11determineIDPcR7XMEGAID+0x96>
		CurrentID = RADIO;
 86a:	22 e0       	ldi	r18, 0x02	; 2
 86c:	fb 01       	movw	r30, r22
 86e:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "RADIO");
 870:	26 e0       	ldi	r18, 0x06	; 6
 872:	e6 e2       	ldi	r30, 0x26	; 38
 874:	f0 e2       	ldi	r31, 0x20	; 32
 876:	dc 01       	movw	r26, r24
 878:	01 90       	ld	r0, Z+
 87a:	0d 92       	st	X+, r0
 87c:	2a 95       	dec	r18
 87e:	e1 f7       	brne	.-8      	; 0x878 <_Z11determineIDPcR7XMEGAID+0x8c>
 880:	08 95       	ret
	}
	else if (CHECK_DIP_SW_1() && CHECK_DIP_SW_2()){
 882:	e0 e4       	ldi	r30, 0x40	; 64
 884:	f6 e0       	ldi	r31, 0x06	; 6
 886:	20 85       	ldd	r18, Z+8	; 0x08
 888:	22 23       	and	r18, r18
 88a:	2c f6       	brge	.-118    	; 0x816 <_Z11determineIDPcR7XMEGAID+0x2a>
 88c:	08 95       	ret
		CurrentID = DEBUG_MODE;
 88e:	23 e0       	ldi	r18, 0x03	; 3
 890:	fb 01       	movw	r30, r22
 892:	20 83       	st	Z, r18
		strcpy(XmegaIDStr, "DEBUG_MODE");
 894:	2b e0       	ldi	r18, 0x0B	; 11
 896:	ec e2       	ldi	r30, 0x2C	; 44
 898:	f0 e2       	ldi	r31, 0x20	; 32
 89a:	dc 01       	movw	r26, r24
 89c:	01 90       	ld	r0, Z+
 89e:	0d 92       	st	X+, r0
 8a0:	2a 95       	dec	r18
 8a2:	e1 f7       	brne	.-8      	; 0x89c <_Z11determineIDPcR7XMEGAID+0xb0>
 8a4:	08 95       	ret

000008a6 <__tablejump2__>:
 8a6:	ee 0f       	add	r30, r30
 8a8:	ff 1f       	adc	r31, r31

000008aa <__tablejump__>:
 8aa:	05 90       	lpm	r0, Z+
 8ac:	f4 91       	lpm	r31, Z
 8ae:	e0 2d       	mov	r30, r0
 8b0:	19 94       	eijmp

000008b2 <_exit>:
 8b2:	f8 94       	cli

000008b4 <__stop_program>:
 8b4:	ff cf       	rjmp	.-2      	; 0x8b4 <__stop_program>


BasicBrainBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00802000  00000646  000006da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00802044  00802044  0000071e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027a1  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c5  00000000  00000000  00002fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008eb  00000000  00000000  0000359c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  00003e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fbc  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000745  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000057dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
   2:	00 00       	nop
   4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
   6:	00 00       	nop
   8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
   a:	00 00       	nop
   c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
   e:	00 00       	nop
  10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
  12:	00 00       	nop
  14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
  16:	00 00       	nop
  18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
  1e:	00 00       	nop
  20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
  22:	00 00       	nop
  24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
  26:	00 00       	nop
  28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
  2e:	00 00       	nop
  30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
  32:	00 00       	nop
  34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c1       	rjmp	.+576    	; 0x27a <__vector_14>
  3a:	00 00       	nop
  3c:	05 c1       	rjmp	.+522    	; 0x248 <__bad_interrupt>
  3e:	00 00       	nop
  40:	03 c1       	rjmp	.+518    	; 0x248 <__bad_interrupt>
  42:	00 00       	nop
  44:	01 c1       	rjmp	.+514    	; 0x248 <__bad_interrupt>
  46:	00 00       	nop
  48:	ff c0       	rjmp	.+510    	; 0x248 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fd c0       	rjmp	.+506    	; 0x248 <__bad_interrupt>
  4e:	00 00       	nop
  50:	fc c0       	rjmp	.+504    	; 0x24a <__vector_20>
  52:	00 00       	nop
  54:	f9 c0       	rjmp	.+498    	; 0x248 <__bad_interrupt>
  56:	00 00       	nop
  58:	f7 c0       	rjmp	.+494    	; 0x248 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f5 c0       	rjmp	.+490    	; 0x248 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
  62:	00 00       	nop
  64:	22 c1       	rjmp	.+580    	; 0x2aa <__vector_25>
  66:	00 00       	nop
  68:	49 c1       	rjmp	.+658    	; 0x2fc <__vector_26>
  6a:	00 00       	nop
  6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
  6e:	00 00       	nop
  70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
  72:	00 00       	nop
  74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
  76:	00 00       	nop
  78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
  82:	00 00       	nop
  84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
  86:	00 00       	nop
  88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
  8e:	00 00       	nop
  90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
  92:	00 00       	nop
  94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
  96:	00 00       	nop
  98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c5 c0       	rjmp	.+394    	; 0x248 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c3 c0       	rjmp	.+390    	; 0x248 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	c1 c0       	rjmp	.+386    	; 0x248 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bf c0       	rjmp	.+382    	; 0x248 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bd c0       	rjmp	.+378    	; 0x248 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	bb c0       	rjmp	.+374    	; 0x248 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
 102:	00 00       	nop
 104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
 106:	00 00       	nop
 108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
 10e:	00 00       	nop
 110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
 112:	00 00       	nop
 114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
 116:	00 00       	nop
 118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
 11e:	00 00       	nop
 120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
 122:	00 00       	nop
 124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
 126:	00 00       	nop
 128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
 12e:	00 00       	nop
 130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
 132:	00 00       	nop
 134:	89 c0       	rjmp	.+274    	; 0x248 <__bad_interrupt>
 136:	00 00       	nop
 138:	87 c0       	rjmp	.+270    	; 0x248 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	85 c0       	rjmp	.+266    	; 0x248 <__bad_interrupt>
 13e:	00 00       	nop
 140:	83 c0       	rjmp	.+262    	; 0x248 <__bad_interrupt>
 142:	00 00       	nop
 144:	81 c0       	rjmp	.+258    	; 0x248 <__bad_interrupt>
 146:	00 00       	nop
 148:	7f c0       	rjmp	.+254    	; 0x248 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7d c0       	rjmp	.+250    	; 0x248 <__bad_interrupt>
 14e:	00 00       	nop
 150:	7b c0       	rjmp	.+246    	; 0x248 <__bad_interrupt>
 152:	00 00       	nop
 154:	79 c0       	rjmp	.+242    	; 0x248 <__bad_interrupt>
 156:	00 00       	nop
 158:	77 c0       	rjmp	.+238    	; 0x248 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
 15e:	00 00       	nop
 160:	73 c0       	rjmp	.+230    	; 0x248 <__bad_interrupt>
 162:	00 00       	nop
 164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
 166:	00 00       	nop
 168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
 16e:	00 00       	nop
 170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
 172:	00 00       	nop
 174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
 176:	00 00       	nop
 178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
 17e:	00 00       	nop
 180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
 182:	00 00       	nop
 184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
 186:	00 00       	nop
 188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
 18e:	00 00       	nop
 190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
 192:	00 00       	nop
 194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
 196:	00 00       	nop
 198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
 1fa:	00 00       	nop
 1fc:	bc 02       	muls	r27, r28
 1fe:	d6 02       	muls	r29, r22
 200:	c9 02       	muls	r28, r25
 202:	e3 02       	muls	r30, r19
 204:	f0 02       	muls	r31, r16
 206:	fd 02       	muls	r31, r29
 208:	0a 03       	fmul	r16, r18

0000020a <__ctors_end>:
 20a:	11 24       	eor	r1, r1
 20c:	1f be       	out	0x3f, r1	; 63
 20e:	cf ef       	ldi	r28, 0xFF	; 255
 210:	cd bf       	out	0x3d, r28	; 61
 212:	df e3       	ldi	r29, 0x3F	; 63
 214:	de bf       	out	0x3e, r29	; 62
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
 21a:	10 e2       	ldi	r17, 0x20	; 32
 21c:	a0 e0       	ldi	r26, 0x00	; 0
 21e:	b0 e2       	ldi	r27, 0x20	; 32
 220:	e6 e4       	ldi	r30, 0x46	; 70
 222:	f6 e0       	ldi	r31, 0x06	; 6
 224:	00 e0       	ldi	r16, 0x00	; 0
 226:	0b bf       	out	0x3b, r16	; 59
 228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
 22a:	07 90       	elpm	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	a4 34       	cpi	r26, 0x44	; 68
 230:	b1 07       	cpc	r27, r17
 232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
 234:	20 e2       	ldi	r18, 0x20	; 32
 236:	a4 e4       	ldi	r26, 0x44	; 68
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
 23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
 23e:	a4 35       	cpi	r26, 0x54	; 84
 240:	b2 07       	cpc	r27, r18
 242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
 244:	fb d0       	rcall	.+502    	; 0x43c <main>
 246:	fd c1       	rjmp	.+1018   	; 0x642 <_exit>

00000248 <__bad_interrupt>:
 248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <__vector_20>:
	WaitForHost,
	MainProgram
} CurrentState = WaitForHost;


ISR(TCC1_OVF_vect){
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	8f 93       	push	r24
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	TCC1.INTFLAGS = TC1_OVFIF_bm;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	e0 e4       	ldi	r30, 0x40	; 64
 262:	f8 e0       	ldi	r31, 0x08	; 8
 264:	84 87       	std	Z+12, r24	; 0x0c
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	8f 91       	pop	r24
 26c:	0f 90       	pop	r0
 26e:	0b be       	out	0x3b, r0	; 59
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_14>:
ISR(TCC0_OVF_vect){
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	0b b6       	in	r0, 0x3b	; 59
 286:	0f 92       	push	r0
 288:	8f 93       	push	r24
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	TCC0.INTFLAGS = TC0_OVFIF_bm;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	e0 e0       	ldi	r30, 0x00	; 0
 292:	f8 e0       	ldi	r31, 0x08	; 8
 294:	84 87       	std	Z+12, r24	; 0x0c
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0b be       	out	0x3b, r0	; 59
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__vector_25>:
ISR(USARTC0_RXC_vect){
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	0b b6       	in	r0, 0x3b	; 59
 2b6:	0f 92       	push	r0
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	USART_RXComplete(&USART_PC_Data);
 2d0:	85 e4       	ldi	r24, 0x45	; 69
 2d2:	90 e2       	ldi	r25, 0x20	; 32
 2d4:	19 d1       	rcall	.+562    	; 0x508 <USART_RXComplete>
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0b be       	out	0x3b, r0	; 59
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <__vector_26>:
ISR(USARTC0_DRE_vect){
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	0b b6       	in	r0, 0x3b	; 59
 308:	0f 92       	push	r0
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	USART_DataRegEmpty(&USART_PC_Data);
 322:	85 e4       	ldi	r24, 0x45	; 69
 324:	90 e2       	ldi	r25, 0x20	; 32
 326:	05 d1       	rcall	.+522    	; 0x532 <USART_DataRegEmpty>
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	bf 91       	pop	r27
 32e:	af 91       	pop	r26
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	7f 91       	pop	r23
 336:	6f 91       	pop	r22
 338:	5f 91       	pop	r21
 33a:	4f 91       	pop	r20
 33c:	3f 91       	pop	r19
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	0b be       	out	0x3b, r0	; 59
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <_Z9uart_initv>:
		
    }
}

void uart_init(void){
	PORTC.DIRSET = PIN3_bm;																			//Sets TX Pin as output
 34e:	e0 e4       	ldi	r30, 0x40	; 64
 350:	f6 e0       	ldi	r31, 0x06	; 6
 352:	88 e0       	ldi	r24, 0x08	; 8
 354:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = PIN2_bm;																			//Sets RX pin as input
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	82 83       	std	Z+2, r24	; 0x02
	
	USART_InterruptDriver_Initialize(&USART_PC_Data, &USARTC0, USART_DREINTLVL_LO_gc);				//Initialize USARTC0 as interrupt driven serial and clear it's buffers
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	60 ea       	ldi	r22, 0xA0	; 160
 35e:	78 e0       	ldi	r23, 0x08	; 8
 360:	85 e4       	ldi	r24, 0x45	; 69
 362:	90 e2       	ldi	r25, 0x20	; 32
 364:	b4 d0       	rcall	.+360    	; 0x4ce <USART_InterruptDriver_Initialize>
	USART_Format_Set(USART_PC_Data.usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);	//Set the data format of 8 bits, no parity, 1 stop bit
 366:	e0 91 45 20 	lds	r30, 0x2045
 36a:	f0 91 46 20 	lds	r31, 0x2046
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	85 83       	std	Z+5, r24	; 0x05
	USART_RxdInterruptLevel_Set(USART_PC_Data.usart, USART_RXCINTLVL_LO_gc);						//Enable the receive interrupt
 372:	83 81       	ldd	r24, Z+3	; 0x03
 374:	8f 7c       	andi	r24, 0xCF	; 207
 376:	80 61       	ori	r24, 0x10	; 16
 378:	83 83       	std	Z+3, r24	; 0x03
	USART_Baudrate_Set(&USARTC0, 207 , 0);															//Set baudrate to 9600 with 32Mhz system clock
 37a:	a0 ea       	ldi	r26, 0xA0	; 160
 37c:	b8 e0       	ldi	r27, 0x08	; 8
 37e:	8f ec       	ldi	r24, 0xCF	; 207
 380:	16 96       	adiw	r26, 0x06	; 6
 382:	8c 93       	st	X, r24
 384:	16 97       	sbiw	r26, 0x06	; 6
 386:	17 96       	adiw	r26, 0x07	; 7
 388:	1c 92       	st	X, r1
	USART_Rx_Enable(USART_PC_Data.usart);															//Enable receiving over serial
 38a:	84 81       	ldd	r24, Z+4	; 0x04
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(USART_PC_Data.usart);															//Enable transmitting over serial
 390:	84 81       	ldd	r24, Z+4	; 0x04
 392:	88 60       	ori	r24, 0x08	; 8
 394:	84 83       	std	Z+4, r24	; 0x04
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
 396:	e0 ea       	ldi	r30, 0xA0	; 160
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	82 81       	ldd	r24, Z+2	; 0x02
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	82 83       	std	Z+2, r24	; 0x02
 3a0:	08 95       	ret

000003a2 <_Z10timer_initv>:
}


void timer_init(void){
	TCC0.PER = 100;	//period for PWM
 3a2:	e0 e0       	ldi	r30, 0x00	; 0
 3a4:	f8 e0       	ldi	r31, 0x08	; 8
 3a6:	24 e6       	ldi	r18, 0x64	; 100
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	26 a3       	std	Z+38, r18	; 0x26
 3ac:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc; //sets the PWM base frequency by 2000000/256
 3ae:	66 e0       	ldi	r22, 0x06	; 6
 3b0:	60 83       	st	Z, r22
	TCC0.CTRLB = TC_WGMODE_SINGLESLOPE_gc; //sets the wave generation mode to single slope
 3b2:	53 e0       	ldi	r21, 0x03	; 3
 3b4:	51 83       	std	Z+1, r21	; 0x01
	TCC0.CTRLB |= (0b00110000); //output pins on red and blue LED
 3b6:	81 81       	ldd	r24, Z+1	; 0x01
 3b8:	80 63       	ori	r24, 0x30	; 48
 3ba:	81 83       	std	Z+1, r24	; 0x01
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc; //interrupt register
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	46 83       	std	Z+6, r20	; 0x06
	TCC0.CCB = 10; 
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	82 a7       	std	Z+42, r24	; 0x2a
 3c6:	93 a7       	std	Z+43, r25	; 0x2b
	TCC0.CCA = 50; 
 3c8:	82 e3       	ldi	r24, 0x32	; 50
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	80 a7       	std	Z+40, r24	; 0x28
 3ce:	91 a7       	std	Z+41, r25	; 0x29
	
	TCC1.PER = 100;
 3d0:	e0 e4       	ldi	r30, 0x40	; 64
 3d2:	f8 e0       	ldi	r31, 0x08	; 8
 3d4:	26 a3       	std	Z+38, r18	; 0x26
 3d6:	37 a3       	std	Z+39, r19	; 0x27
	TCC1.CTRLA = TC_CLKSEL_DIV256_gc;
 3d8:	60 83       	st	Z, r22
	TCC1.CTRLB = TC_WGMODE_SINGLESLOPE_gc;
 3da:	51 83       	std	Z+1, r21	; 0x01
	TCC1.CTRLB |= (0b00010000); //output pins on green LED
 3dc:	21 81       	ldd	r18, Z+1	; 0x01
 3de:	20 61       	ori	r18, 0x10	; 16
 3e0:	21 83       	std	Z+1, r18	; 0x01
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
 3e2:	46 83       	std	Z+6, r20	; 0x06
	TCC1.CCA = 50;
 3e4:	80 a7       	std	Z+40, r24	; 0x28
 3e6:	91 a7       	std	Z+41, r25	; 0x29
 3e8:	08 95       	ret

000003ea <_Z12SendStringPCPc>:
}


void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 81       	ld	r18, Z
 3ee:	22 23       	and	r18, r18
 3f0:	59 f0       	breq	.+22     	; 0x408 <_Z12SendStringPCPc+0x1e>
 3f2:	dc 01       	movw	r26, r24
 3f4:	11 96       	adiw	r26, 0x01	; 1
		while(!USART_IsTXDataRegisterEmpty(&USARTC0));
 3f6:	e0 ea       	ldi	r30, 0xA0	; 160
 3f8:	f8 e0       	ldi	r31, 0x08	; 8
 3fa:	81 81       	ldd	r24, Z+1	; 0x01
 3fc:	85 ff       	sbrs	r24, 5
 3fe:	fd cf       	rjmp	.-6      	; 0x3fa <_Z12SendStringPCPc+0x10>
		USART_PutChar(&USARTC0, stufftosend[i]);
 400:	20 83       	st	Z, r18
	TCC1.CCA = 50;
}


void SendStringPC(char *stufftosend){
	for(int i = 0 ; stufftosend[i] != '\0' ; i++){
 402:	2d 91       	ld	r18, X+
 404:	21 11       	cpse	r18, r1
 406:	f9 cf       	rjmp	.-14     	; 0x3fa <_Z12SendStringPCPc+0x10>
 408:	08 95       	ret

0000040a <_Z23SetXMEGA32MhzCalibratedv>:
	}
}


void SetXMEGA32MhzCalibrated(){
	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 40a:	88 ed       	ldi	r24, 0xD8	; 216
 40c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;				//Enable 32MHz oscillator
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); //Wait for oscillator to be ready
 414:	e0 e5       	ldi	r30, 0x50	; 80
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	81 81       	ldd	r24, Z+1	; 0x01
 41a:	81 ff       	sbrs	r24, 1
 41c:	fd cf       	rjmp	.-6      	; 0x418 <_Z23SetXMEGA32MhzCalibratedv+0xe>
	CCP = CCP_IOREG_gc;						//Disable register security for clock update
 41e:	88 ed       	ldi	r24, 0xD8	; 216
 420:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;		//Switch to 32MHz clock
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	90 93 40 00 	sts	0x0040, r25


	CCP = CCP_IOREG_gc;						//Disable register security for oscillator update
 428:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL |= OSC_RC32KEN_bm;				//Enable 32Khz oscillator
 42a:	e0 e5       	ldi	r30, 0x50	; 80
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	84 60       	ori	r24, 0x04	; 4
 432:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32KRDY_bm)); //Wait for oscillator to be ready
 434:	81 81       	ldd	r24, Z+1	; 0x01
 436:	82 ff       	sbrs	r24, 2
 438:	fd cf       	rjmp	.-6      	; 0x434 <_Z23SetXMEGA32MhzCalibratedv+0x2a>
	/*
	OSC.DFLLCTRL &= ~OSC_RC32MCREF_bm;		//Set up calibration source to be 32Khz crystal
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;		//Enable calibration of 32Mhz oscillator 
	*/
 43a:	08 95       	ret

0000043c <main>:

char recieveChar;

int main(void)
{
	SetXMEGA32MhzCalibrated();
 43c:	e6 df       	rcall	.-52     	; 0x40a <_Z23SetXMEGA32MhzCalibratedv>
	
	//Initialization Code
	uart_init();
 43e:	87 df       	rcall	.-242    	; 0x34e <_Z9uart_initv>
	PORTC.DIRSET = (PIN5_bm | PIN6_bm | PIN7_bm); //Sets status/error led outputs
 440:	e0 e4       	ldi	r30, 0x40	; 64
 442:	f6 e0       	ldi	r31, 0x06	; 6
 444:	80 ee       	ldi	r24, 0xE0	; 224
 446:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = (PIN0_bm | PIN1_bm | PIN4_bm); //Set RGB Led outputs
 448:	83 e1       	ldi	r24, 0x13	; 19
 44a:	81 83       	std	Z+1, r24	; 0x01
	//PORTC.DIRCLR = PIN0_bm;
	timer_init();  //Initialize Timers
 44c:	aa df       	rcall	.-172    	; 0x3a2 <_Z10timer_initv>
	PMIC.CTRL |= PMIC_LOLVLEN_bm; //draws current for ?
 44e:	e0 ea       	ldi	r30, 0xA0	; 160
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	82 81       	ldd	r24, Z+2	; 0x02
 454:	81 60       	ori	r24, 0x01	; 1
 456:	82 83       	std	Z+2, r24	; 0x02

	sei(); //Enable interrupts
 458:	78 94       	sei
	
    while(1)
    { 
		if(USART_RXBufferData_Available(&USART_PC_Data)){
 45a:	85 e4       	ldi	r24, 0x45	; 69
 45c:	90 e2       	ldi	r25, 0x20	; 32
 45e:	40 d0       	rcall	.+128    	; 0x4e0 <USART_RXBufferData_Available>
 460:	88 23       	and	r24, r24
 462:	d9 f3       	breq	.-10     	; 0x45a <main+0x1e>
			recieveChar = USART_RXBuffer_GetByte(&USART_PC_Data);
 464:	85 e4       	ldi	r24, 0x45	; 69
 466:	90 e2       	ldi	r25, 0x20	; 32
 468:	43 d0       	rcall	.+134    	; 0x4f0 <USART_RXBuffer_GetByte>
 46a:	80 93 44 20 	sts	0x2044, r24
			switch(recieveChar){
 46e:	87 36       	cpi	r24, 0x67	; 103
 470:	a9 f0       	breq	.+42     	; 0x49c <main+0x60>
 472:	18 f4       	brcc	.+6      	; 0x47a <main+0x3e>
 474:	82 36       	cpi	r24, 0x62	; 98
 476:	61 f0       	breq	.+24     	; 0x490 <main+0x54>
 478:	1d c0       	rjmp	.+58     	; 0x4b4 <main+0x78>
 47a:	82 37       	cpi	r24, 0x72	; 114
 47c:	19 f0       	breq	.+6      	; 0x484 <main+0x48>
 47e:	89 37       	cpi	r24, 0x79	; 121
 480:	99 f0       	breq	.+38     	; 0x4a8 <main+0x6c>
 482:	18 c0       	rjmp	.+48     	; 0x4b4 <main+0x78>
				case 'r':
					SendStringPC("Red LED.\r\n");
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e2       	ldi	r25, 0x20	; 32
 488:	b0 df       	rcall	.-160    	; 0x3ea <_Z12SendStringPCPc>
					RGBSetColor(RED);
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	6c d0       	rcall	.+216    	; 0x566 <_Z11RGBSetColor9RGBColors>
					break;
 48e:	15 c0       	rjmp	.+42     	; 0x4ba <main+0x7e>
				case 'b':
					SendStringPC("Blue LED.\r\n");
 490:	8b e0       	ldi	r24, 0x0B	; 11
 492:	90 e2       	ldi	r25, 0x20	; 32
 494:	aa df       	rcall	.-172    	; 0x3ea <_Z12SendStringPCPc>
					RGBSetColor(BLUE);	
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	66 d0       	rcall	.+204    	; 0x566 <_Z11RGBSetColor9RGBColors>
					break;
 49a:	0f c0       	rjmp	.+30     	; 0x4ba <main+0x7e>
				case 'g':
					SendStringPC("Green LED.\r\n");
 49c:	87 e1       	ldi	r24, 0x17	; 23
 49e:	90 e2       	ldi	r25, 0x20	; 32
 4a0:	a4 df       	rcall	.-184    	; 0x3ea <_Z12SendStringPCPc>
					RGBSetColor(GREEN);				
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	60 d0       	rcall	.+192    	; 0x566 <_Z11RGBSetColor9RGBColors>
					break;
 4a6:	09 c0       	rjmp	.+18     	; 0x4ba <main+0x7e>
				case 'y':
					SendStringPC("Yellow LED.\r\n");
 4a8:	84 e2       	ldi	r24, 0x24	; 36
 4aa:	90 e2       	ldi	r25, 0x20	; 32
 4ac:	9e df       	rcall	.-196    	; 0x3ea <_Z12SendStringPCPc>
					RGBSetColor(YELLOW);
 4ae:	84 e0       	ldi	r24, 0x04	; 4
 4b0:	5a d0       	rcall	.+180    	; 0x566 <_Z11RGBSetColor9RGBColors>
					break;
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <main+0x7e>
				default:
					SendStringPC("Can't do that.\r\n");
 4b4:	82 e3       	ldi	r24, 0x32	; 50
 4b6:	90 e2       	ldi	r25, 0x20	; 32
 4b8:	98 df       	rcall	.-208    	; 0x3ea <_Z12SendStringPCPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ba:	2f ef       	ldi	r18, 0xFF	; 255
 4bc:	89 ef       	ldi	r24, 0xF9	; 249
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	21 50       	subi	r18, 0x01	; 1
 4c2:	80 40       	sbci	r24, 0x00	; 0
 4c4:	90 40       	sbci	r25, 0x00	; 0
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <main+0x84>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <main+0x8e>
 4ca:	00 00       	nop
 4cc:	c6 cf       	rjmp	.-116    	; 0x45a <main+0x1e>

000004ce <USART_InterruptDriver_Initialize>:
		tempCTRLA = usart_data->usart->CTRLA;
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
		usart_data->usart->CTRLA = tempCTRLA;
	}
	return TXBuffer_FreeSpace;
}
 4ce:	fc 01       	movw	r30, r24
 4d0:	60 83       	st	Z, r22
 4d2:	71 83       	std	Z+1, r23	; 0x01
 4d4:	42 83       	std	Z+2, r20	; 0x02
 4d6:	14 86       	std	Z+12, r1	; 0x0c
 4d8:	13 86       	std	Z+11, r1	; 0x0b
 4da:	16 86       	std	Z+14, r1	; 0x0e
 4dc:	15 86       	std	Z+13, r1	; 0x0d
 4de:	08 95       	ret

000004e0 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 4e0:	fc 01       	movw	r30, r24
 4e2:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 4e4:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	29 13       	cpse	r18, r25
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <USART_RXBufferData_Available+0xe>
 4ec:	80 e0       	ldi	r24, 0x00	; 0
}
 4ee:	08 95       	ret

000004f0 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 4f0:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 4f2:	84 85       	ldd	r24, Z+12	; 0x0c
 4f4:	df 01       	movw	r26, r30
 4f6:	a8 0f       	add	r26, r24
 4f8:	b1 1d       	adc	r27, r1
 4fa:	13 96       	adiw	r26, 0x03	; 3
 4fc:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 4fe:	94 85       	ldd	r25, Z+12	; 0x0c
 500:	9f 5f       	subi	r25, 0xFF	; 255
 502:	93 70       	andi	r25, 0x03	; 3
 504:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 506:	08 95       	ret

00000508 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 508:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 50a:	83 85       	ldd	r24, Z+11	; 0x0b
 50c:	8f 5f       	subi	r24, 0xFF	; 255
 50e:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 510:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 512:	a0 81       	ld	r26, Z
 514:	b1 81       	ldd	r27, Z+1	; 0x01
 516:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 518:	89 17       	cp	r24, r25
 51a:	49 f0       	breq	.+18     	; 0x52e <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 51c:	93 85       	ldd	r25, Z+11	; 0x0b
 51e:	df 01       	movw	r26, r30
 520:	a9 0f       	add	r26, r25
 522:	b1 1d       	adc	r27, r1
 524:	13 96       	adiw	r26, 0x03	; 3
 526:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 528:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 52e:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 530:	08 95       	ret

00000532 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 532:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 534:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 536:	95 85       	ldd	r25, Z+13	; 0x0d
 538:	98 13       	cpse	r25, r24
 53a:	07 c0       	rjmp	.+14     	; 0x54a <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 53c:	01 90       	ld	r0, Z+
 53e:	f0 81       	ld	r31, Z
 540:	e0 2d       	mov	r30, r0
 542:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 544:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 546:	83 83       	std	Z+3, r24	; 0x03
 548:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 54a:	86 85       	ldd	r24, Z+14	; 0x0e
 54c:	df 01       	movw	r26, r30
 54e:	a8 0f       	add	r26, r24
 550:	b1 1d       	adc	r27, r1
 552:	17 96       	adiw	r26, 0x07	; 7
 554:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 556:	a0 81       	ld	r26, Z
 558:	b1 81       	ldd	r27, Z+1	; 0x01
 55a:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 55c:	86 85       	ldd	r24, Z+14	; 0x0e
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	83 70       	andi	r24, 0x03	; 3
 562:	86 87       	std	Z+14, r24	; 0x0e
 564:	08 95       	ret

00000566 <_Z11RGBSetColor9RGBColors>:
#include "XMegaLib.h"
#include <avr/io.h>

//This function handles making colors on the RGB LED
void RGBSetColor(RGBColors choice){
	switch(choice){
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	87 30       	cpi	r24, 0x07	; 7
 56a:	91 05       	cpc	r25, r1
 56c:	08 f0       	brcs	.+2      	; 0x570 <_Z11RGBSetColor9RGBColors+0xa>
 56e:	62 c0       	rjmp	.+196    	; 0x634 <_Z11RGBSetColor9RGBColors+0xce>
 570:	fc 01       	movw	r30, r24
 572:	e2 50       	subi	r30, 0x02	; 2
 574:	ff 4f       	sbci	r31, 0xFF	; 255
 576:	5f c0       	rjmp	.+190    	; 0x636 <__tablejump2__>
		case RED:
			TCC0.CCA = 0;
 578:	e0 e0       	ldi	r30, 0x00	; 0
 57a:	f8 e0       	ldi	r31, 0x08	; 8
 57c:	10 a6       	std	Z+40, r1	; 0x28
 57e:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = COLOR_ON;
 580:	82 e3       	ldi	r24, 0x32	; 50
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	82 a7       	std	Z+42, r24	; 0x2a
 586:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = 0;
 588:	e0 e4       	ldi	r30, 0x40	; 64
 58a:	f8 e0       	ldi	r31, 0x08	; 8
 58c:	10 a6       	std	Z+40, r1	; 0x28
 58e:	11 a6       	std	Z+41, r1	; 0x29
			break;
 590:	08 95       	ret
		case BLUE:
			TCC0.CCA = COLOR_ON;
 592:	e0 e0       	ldi	r30, 0x00	; 0
 594:	f8 e0       	ldi	r31, 0x08	; 8
 596:	82 e3       	ldi	r24, 0x32	; 50
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	80 a7       	std	Z+40, r24	; 0x28
 59c:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = 0;
 59e:	12 a6       	std	Z+42, r1	; 0x2a
 5a0:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = 0;
 5a2:	e0 e4       	ldi	r30, 0x40	; 64
 5a4:	f8 e0       	ldi	r31, 0x08	; 8
 5a6:	10 a6       	std	Z+40, r1	; 0x28
 5a8:	11 a6       	std	Z+41, r1	; 0x29
			break;
 5aa:	08 95       	ret
		case GREEN:
			TCC0.CCA = 0;
 5ac:	e0 e0       	ldi	r30, 0x00	; 0
 5ae:	f8 e0       	ldi	r31, 0x08	; 8
 5b0:	10 a6       	std	Z+40, r1	; 0x28
 5b2:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = 0;
 5b4:	12 a6       	std	Z+42, r1	; 0x2a
 5b6:	13 a6       	std	Z+43, r1	; 0x2b
			TCC1.CCA = COLOR_ON;
 5b8:	82 e3       	ldi	r24, 0x32	; 50
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	e0 e4       	ldi	r30, 0x40	; 64
 5be:	f8 e0       	ldi	r31, 0x08	; 8
 5c0:	80 a7       	std	Z+40, r24	; 0x28
 5c2:	91 a7       	std	Z+41, r25	; 0x29
			break;
 5c4:	08 95       	ret
		case PURPLE:
			TCC0.CCA = COLOR_ON;
 5c6:	e0 e0       	ldi	r30, 0x00	; 0
 5c8:	f8 e0       	ldi	r31, 0x08	; 8
 5ca:	82 e3       	ldi	r24, 0x32	; 50
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	80 a7       	std	Z+40, r24	; 0x28
 5d0:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = COLOR_ON;
 5d2:	82 a7       	std	Z+42, r24	; 0x2a
 5d4:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = 0;
 5d6:	e0 e4       	ldi	r30, 0x40	; 64
 5d8:	f8 e0       	ldi	r31, 0x08	; 8
 5da:	10 a6       	std	Z+40, r1	; 0x28
 5dc:	11 a6       	std	Z+41, r1	; 0x29
			break;
 5de:	08 95       	ret
		case YELLOW:
			TCC0.CCA = 0;
 5e0:	e0 e0       	ldi	r30, 0x00	; 0
 5e2:	f8 e0       	ldi	r31, 0x08	; 8
 5e4:	10 a6       	std	Z+40, r1	; 0x28
 5e6:	11 a6       	std	Z+41, r1	; 0x29
			TCC0.CCB = COLOR_ON;
 5e8:	82 e3       	ldi	r24, 0x32	; 50
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	82 a7       	std	Z+42, r24	; 0x2a
 5ee:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON;
 5f0:	e0 e4       	ldi	r30, 0x40	; 64
 5f2:	f8 e0       	ldi	r31, 0x08	; 8
 5f4:	80 a7       	std	Z+40, r24	; 0x28
 5f6:	91 a7       	std	Z+41, r25	; 0x29
			break;
 5f8:	08 95       	ret
		case WHITE:
			TCC0.CCA = COLOR_ON;
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	f8 e0       	ldi	r31, 0x08	; 8
 5fe:	82 e3       	ldi	r24, 0x32	; 50
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	80 a7       	std	Z+40, r24	; 0x28
 604:	91 a7       	std	Z+41, r25	; 0x29
			TCC0.CCB = COLOR_ON;
 606:	82 a7       	std	Z+42, r24	; 0x2a
 608:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON;
 60a:	e0 e4       	ldi	r30, 0x40	; 64
 60c:	f8 e0       	ldi	r31, 0x08	; 8
 60e:	80 a7       	std	Z+40, r24	; 0x28
 610:	91 a7       	std	Z+41, r25	; 0x29
			break;
 612:	08 95       	ret
		case ORANGE:
			TCC0.CCB = COLOR_ON;      //Red
 614:	e0 e0       	ldi	r30, 0x00	; 0
 616:	f8 e0       	ldi	r31, 0x08	; 8
 618:	82 e3       	ldi	r24, 0x32	; 50
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	82 a7       	std	Z+42, r24	; 0x2a
 61e:	93 a7       	std	Z+43, r25	; 0x2b
			TCC1.CCA = COLOR_ON / 2;  //Green
 620:	89 e1       	ldi	r24, 0x19	; 25
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	a0 e4       	ldi	r26, 0x40	; 64
 626:	b8 e0       	ldi	r27, 0x08	; 8
 628:	98 96       	adiw	r26, 0x28	; 40
 62a:	8d 93       	st	X+, r24
 62c:	9c 93       	st	X, r25
 62e:	99 97       	sbiw	r26, 0x29	; 41
			TCC0.CCA = 0;             //Blue
 630:	10 a6       	std	Z+40, r1	; 0x28
 632:	11 a6       	std	Z+41, r1	; 0x29
 634:	08 95       	ret

00000636 <__tablejump2__>:
 636:	ee 0f       	add	r30, r30
 638:	ff 1f       	adc	r31, r31

0000063a <__tablejump__>:
 63a:	05 90       	lpm	r0, Z+
 63c:	f4 91       	lpm	r31, Z
 63e:	e0 2d       	mov	r30, r0
 640:	19 94       	eijmp

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
